Buy and sell with 'k' transcations 

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        return Recursive(prices, 0, true, 1);
    }

    int Recursive(vector<int> &p, int ind, bool b, int k) {
        if (ind >= p.size() || k <= 0) return 0;
        int ans = 0;
        
        if (b) {
            return max(-p[ind] + Recursive(p, ind + 1, !b, k), Recursive(p, ind + 1, b, k));
        } else {
            return max({ p[ind] + Recursive(p, ind + 1, !b, k - 1), Recursive(p, ind + 1, b, k) });
        }`
    }
};


Kadane algo 

cur_max --> abhi tak ki array le , ya sirf naya number 


Set Matrix zero 

Use set to know location of 0 and do another traversal for actual zeroing , better to use 1st row and 1st column as marker


Pascal Triangle 

Initution will solve but nth row is ncr

int nCr(int n, int r) {
    long long res = 1;

    // calculating nCr:
    for (int i = 0; i < r; i++) {
        res = res * (n - i);
        res = res / (i + 1);
    }
    return res;
}

void pascalTriangle(int n) {
    // printing the entire row n:
    for (int c = 1; c <= n; c++) {
        cout << nCr(n - 1, c - 1) << " ";
    }
    cout << "n";
}


Sort 0s, 1s , 2s

Swap wala logic h 0 ko aage , 2 ko peeche , 2 ko peeche le jate time index inc mat karo (because of case like 1 2 0)


Next permutation (2 1 5 4 3 0 0 ) ---> [2,3,0,0,1,4,5]

Think logically , start from end of array find a adjacent element which is not in decreasing form now ensure smallest number which can take the place
of left element takes it and sort rest of array

//find the first adjacent pair from right side where left is smaller than right
 //if you dont find such a pair, reverse the whole array
//swap the left element in the pair with the smallest element greater than that to its right
//then reverse the sub array from the point of swap(after the left element in the pair) till the end

https://leetcode.com/problems/longest-repeating-character-replacement/ (https://www.youtube.com/watch?v=_eNhaDCr6P0) --> Good sliding window problem


Repeating and missing number in array (explain : https://www.youtube.com/watch?v=pnx5JA9LNM4&list=PL-Jc9J83PIiFJRioti3ZV7QabwoJK6eKe&index=9)

PS -- Exactly one number is missing and one number appears twice in range (1--> N)

Ex : 1 4 2 2 --> answer would be 2 and 3

Xor of number with itself is always zero, take xor of original array and what should be correct array ( 1 -> 4)

We would be left with 2 xor 3 (all other number would get cut )
 
Now get the right-most set bit  = number & -number

The original set (which is array + 1-> n) can be divided into 2 with numbers having right most set bit as on/off and each of our number would be in different bucket 
Go thru set if & is zero xor seperately and if & is one xor seperately (you have 2 numbers)


41. Missing number (https://leetcode.com/problems/first-missing-positive)

Here the numbers could be duplicate we can have negative etc so above approach wont work 

Here one approach is to use cyclic sort (place the number in their correct position) this relies on using number as index 

so for num[i] its correct positions is num[i] - 1 ( ex 2 correct position is 1)

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        
        for (int i = 0; i < n; ) {
            if (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]) {
                swap(nums[i], nums[nums[i] - 1]);
            } else {
                i++;
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        
        return n + 1;
    }
};

Another approach could be first check if 1 exists or not in array ( we will use 1 as delimiter) if it does go thru array if we see numbers <=0 || > N
convert them to 1

Now traverse array for every number go ahead and mark number as num[i]-1 (correct position of number as negative showing its presence)


Rotate matrix : think about final solution like what would ans[i][j] could be than figure out operation ( ex clockwise --> transpose + row reverse)

*** IMP ******Count inversion (explain : https://www.youtube.com/watch?v=uojx--MK_n0)

Basically gives how far a array is from getting sorted (if a[i] > a[j] but i < j that is a insertion)

Same as merge sort but in the step where we do merging of array whenever left is bigger we do count + = left.size - index; 

merge(s, m, arr);   merge(m+1, e, arr);  mergeCount(arr, s, m, e);

in mergeCount we do the counting i start from s and goes till m , j start from m+1 and goes till e

Power (x, n) : based on logic that xpn = xpn/2 * xpn/2 (when n is even we need another x when odd just do recursion on same)

n/3 element --> same as n/2 just take 2 candidates  and than run in last loop to verify that answer we got is right

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int a = 0, b = 1, ca = 0, cb = 0;  // Initialize a and b to different values
        vector<int> result;

        if(nums.size() < 3) {
            sort(nums.begin(), nums.end());
            nums.erase(unique(nums.begin(), nums.end()), nums.end());
            return nums;
        }

        for(int x : nums) {
            if(x == a) {
                ca++;
            } else if(x == b) {
                cb++;
            } else if(ca == 0) {
                a = x;
                ca = 1;
            } else if(cb == 0) {
                b = x;
                cb = 1;
            } else {
                ca--;
                cb--;
            }
        }

        ca = cb = 0;
        for (int num : nums) {
            if (num == a) ca++;
            else if (num == b) cb++;
        }

        // Check if candidates appear more than n/3 times
        if (ca > n/3) result.push_back(a);
        if (cb > n/3) result.push_back(b);

        return result;
    }
};

larget Subarray with sum = 0 (running sum niklate jao zero h to check max ,also map me index aur uska running sum store karo same aaya to window me zero sum h)

Number of subarray with sum k (explain : https://www.youtube.com/watch?v=xvNwoz-ufXA) (See : 974. Count Subarray Sums Divisible by K in misc concepts)

take a loop i(0--> n) and j(i --> n) keep on calculating sum if it matches we count (slightly better than brute)

Optimal approach is to prefix sum (remember if 0 < i < j < n) prefix[j] = prefix[i] + (sum of elements from i+1 to j-1)

Let us say prefix_sum(j) = s ( we are looking for a subarray ending at j with sum k) (so there must exist a i < j whose prefix sum is s-k)

So in a hash_map keep on storing (prefix_sum , count_occ ) and use above to get result



Merge intervals 

vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr) {
    int n = arr.size(); // size of the array

    //sort the given intervals:
    sort(arr.begin(), arr.end());

    vector<vector<int>> ans;

    for (int i = 0; i < n; i++) {
        // if the current interval does not
        // lie in the last interval:
        if (ans.empty() || arr[i][0] > ans.back()[1]) {
            ans.push_back(arr[i]);
        }
        // if the current interval
        // lies in the last interval:
        else {
            ans.back()[1] = max(ans.back()[1], arr[i][1]);
        }
    }
    return ans;
}


********* Binary search ***************************


First and last occurance of element in sorted array 

Do binary search when you get number go for either side to get first and last

--> Rotated sorted array etc (we discard based on endElements) , peak element (array is unsorted so we rely only on neighbours)

Number of times sorted array is rotated : ex 5 1 2 3 4 is rotated once 

Min in rotated sorted array
class Solution {
public:
    int findMin(vector<int>& arr) {
        int left = 0;
        int right = arr.size() - 1;

        while(left < right) {
            int mid = left + (right - left)/2;

            if(arr[mid] > arr[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return arr[left];
    }
};

number of times array rotated is index of minimum element(pivot)

class Solution {
public:
    int findMin(vector<int>& arr) {
        int left = 0;
        int right = arr.size() - 1;

        while(left <= right) {
            int mid = left + (right - left)/2;

            if(arr[mid] > arr[right]) {
                left = mid + 1;
            } else if ( arr[mid] < arr[right]){
                right = mid;
            } else {
                right--;
            }
        }

        return arr[left];
    }
};



This follows the Initution of BS where we need to discard a side based on our selection(mid), here the pivot element would be one which is lesser than both 
of its neighbor, if this is not the case we need to check if arr[m] > arr[high] because one half of array would be sorted and other half would be unsorted , 
answer would always lie in unsorted half because its less than both neighbor, it means answer lies in (mid+1,high) else opposite

Searching in a rotated sorted array --> find pivot than do BS in 2 arrays divided by pivot


Position of element in infinite sorted array --> issue is we dont know bounds since high is infinite
Let low be pointing to 1st element and high pointing to 2nd element of array, Now compare key with high index element, 
->if it is greater than high index element then copy high index in low index and double the high index. 
->if it is smaller, then apply binary search on high and low indices found


Find peak element (greater than both its neighbour) using BS 

get mid , check if it is peak , if not move to the side which is larger than mid element (which caused this not be a peak). let us break down inituition for this

A peak element is defined as an element that is not smaller than its neighbors. In simpler terms, a peak is either:

A local maximum (larger than both its neighbors), or
An edge element (in case its the first or last element of the array, and there is no neighbor on one side).
How Binary Search Discards One Side:
Lets break down why we can confidently discard one side when comparing the middle element arr[mid] to its neighbors.

If arr[mid] < arr[mid + 1]:
This means the right neighbor (arr[mid + 1]) is larger than arr[mid].
We can conclude that there is a slope upwards towards the right. Moving in this direction (right) gives us two scenarios:
There could be a peak further right. Since the slope is increasing, we might find a local peak somewhere on the right.
The rightmost element could be the peak. Even if we dont encounter an intermediate peak, the last element (or near the last) could be the peak, 
as its higher than arr[mid] (so no smaller elements force us to return left).


Allocate minimum no of pages (https://www.youtube.com/watch?v=2JSQIhPcHQg&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=21)/ Similar concept in Aggressive cows

Do BS between 0 and sum of all pages 
Get mid check if that is max a student can read are number of students getting books is equal to all students if yes than that is valid combo we recur for 
better answer in each case

https://leetcode.com/problems/split-array-largest-sum/ (ALl these are based on concept of maximising min / minimising max which is always BS on answer)

class Solution {
public:
    bool isPossible(vector<int> &nums, int m, int k) {
        int bucket_needed = 1;
        int r_sum = 0;

        for(int x : nums) {
            if(x > m) return false;
            r_sum += x;

            if(r_sum > m) {
                bucket_needed++;
                r_sum = x;
            }
        }

        return bucket_needed <= k;
    }
    int splitArray(vector<int>& nums, int k) {
        
        int n = nums.size();
        int high = accumulate(nums.begin(), nums.end(), 0);
        int low = 0;
        int res = 0;

        while(low <= high) {
           int m = low + (high - low)/2;

           if(isPossible(nums, m, k)) {
            res = m;
            high = m-1;
           } else {
            low = m + 1;
           }
        }

        return res;
    }
};


Median in a row wise sorted matrix (note it is not sorted column wise)

Observations:

What is the search space where we will apply binary search?

If we carefully observe, our answer lies between the smallest and the largest number in the given matrix. So, the search space will be [min(matrix), max(matrix)].
While applying binary search how to check if an element ‘x’ is a possible median?

If ‘x’ is the median, the number of elements smaller or equal to ‘x’ will be surely greater than (MXN) // 2 (integer division).
How to check how many numbers are smaller or equal to an element ‘mid’?

One of the ways is to traverse the whole matrix and count the numbers. But in that case, the time complexity will be high. So, we have to find other ways. It is given that the matrix is row-wise sorted. So, we can apply the concept of upper bound
For every particular row, we will find the upper bound of the current element ‘mid’. The index returned will be the number of smaller or equal elements in that row.
We will do it for each row and add them to get the total number for the whole matrix.
Mathematically, smaller_equal_in_row = upperBound(matrix[row], mid)
We will just convert the above observation into code.

Algorithm:

Calculate min(matrix) and max(matrix): As the given matrix is row-wise sorted the minimum element will be the minimum element in the first column and the maximum will be the maximum in the last column.
Place the 2 pointers low and high: Initially, we will place the pointers. The pointer low will point to min(matrix) and the high will point to max(matrix).
Calculate the ‘mid’: Now, inside a loop, we will calculate the value of ‘mid’ using the following formula: mid = (low+high) // 2 ( ‘//’ refers to integer division)
Use the calculateSmallEqual() function to get the number of elements <= mid: Inside the function, we will use the above-mentioned upper bound formula for each row and calculate the total number of elements <= mid. Then we will return the total number from the function calculateSmallEqual().
If smallEqual <= (M*N) // 2: We can conclude that our median must be a bigger number. So, we will eliminate the left i.e. the smaller half (low = mid+1).
If smallEqual > (M*N) // 2: We can conclude that the element mid might be the median. But we have to reach the smallest number to find the actual median. So, in this case, we will remove the right half( i.e. high = mid-1).


Find element that appears once in sorted array where everyone appears twice 


Since the array is sorted, and all elements except one appear twice, we can leverage binary search to reduce the time complexity to O(log n).

The key observation is how the indices are structured around the single element:

If we look at the array before the single element, pairs will have their first occurrence at an even index and their second occurrence at an odd index.
After the single element, the pattern reverses: the second occurrence of pairs will be at an even index, and the first occurrence of the next pair will be at an odd index.
This gives us a way to decide which half of the array to discard during binary search.


Similar logic can be applied to find kth element in 2 sorted array 

basically by having search space as min, max getting mid and checking in both array how many numbers are smaller than this 

And sum should be k-1. (note how we update answer when number of elements smaller is more than k as we are counting case where one of those number is mid itself)

// See here when we get number we dont return directly reason is we may miss case where numbers repeat

class Solution {
  public:
   int count(int target, vector<int>& arr) {
    int s = 0;
    int e = arr.size() - 1;
    
    while (s <= e) {
        int m = s + (e - s) / 2;
        
        if (arr[m] <= target) {
            s = m + 1;
        } else {
            e = m - 1;
        }
    }
    
    return s;
}
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) {
        
        int n = arr1.size();
        int m = arr2.size();
        
        
        int start = min(arr1[0], arr2[0]);
        int end = max(arr1[n-1], arr2[m-1]);
        
         while(start <= end) {
            int mid = start + (end - start) / 2;
            
            int c_a = count(mid, arr1);
            int c_b = count(mid, arr2);
            
            if(c_a + c_b < k) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return start;
    
    }
};



Median of 2 sorted arrays (https://www.youtube.com/watch?v=jDJuW7tSxio) / prefer watching code story with mik one instead

btw there exists a worst solution to do this by applying bs on range [min, max] {similar to finding median in row wise sorted matrix}


Finding the Correct Partition: Let’s say we partition arr1 at index i and arr2 at index j. The total number of elements in the left part of both arrays will 
be i + j, and the right part will contain the remaining elements.

We need to ensure that all the elements in the left part (combined from both arrays) are less than or equal to the elements in the right part 
(combined from both arrays).

In other words, we want:


arr1[i-1] <= arr2[j] 
and 
arr2[j-1] <= arr1[i]
This condition ensures that the partition is correct.

Binary Search on Smaller Array: We perform binary search on the smaller array (to keep the time complexity low). At each step of the binary search:

l = 0 h = length of smaller array 

Px (elements from smaller array) is mid , Py elements from bigger array is (m + n + 1)/2 - Px

We compute the partition indices for both arrays.
We check if the partition condition is satisfied.
If the condition is satisfied, we compute the median.
If not, we adjust the binary search range (move left or right).


719. https://leetcode.com/problems/find-k-th-smallest-pair-distance/description/ (checks multiple array concepts watch code story video for idea)


Quick sort (https://www.youtube.com/watch?v=4eEWCQveqk8)

Inplace algo all changes are done in original array itself

basic idea is to choose any element as pivot (like last first etc)
partition array based on it (meaning all elements less than it are at one side and all elemets more than it are at other side)
Repeat the process


Quicksort(arr, low, high) {
    if(low > high) return;

    int pi = partitioning(arr, low, high);
    Quicksort(arr, low, pi-1);
    Quicksort(arr, pi+1, high);
}

int partitioning (int arr[], int low, int high) {
        int pivot      = arr[high];
        int pivotIndex = low;
        
        for(int i = low; i < high; i++) {
            if(arr[i] <= pivot) {
                swap(arr[i], arr[pivotIndex]);
                pivotIndex++;
            }
        }
        
        swap(arr[pivotIndex], arr[high]);
        
        return pivotIndex;
    }


** Minimum swaps to make array sorted (https://www.youtube.com/watch?v=wwwd_tvfQGE) ****

Simple version 

class Solution {
  public:
    // Function to find the minimum number of swaps required to sort the array.
    int findIndex(vector<int> &arr, int n, int x) {
        for(int i=0; i<n; i++) {
            if(arr[i] == x) return i;
        }
        
        return -1;
    }
    int minSwaps(vector<int>& arr) {
        int n = arr.size();
        
        vector<int> sorted = arr;
        
        sort(sorted.begin(), sorted.end());
        
        int swaps = 0;
        
        int i=0;
        
        while(i < n) {
            if(arr[i] == sorted[i]) {
                i++;
                continue;
            }
            
            int find = findIndex(arr, n, sorted[i]);
            
            swap(arr[i], arr[find]);
            swaps++;
        }
        
        return swaps;
    }
};

FindIndex is time consuming we can simply store that in a map to make computations faster

 int countSwaps(vector<int>& values) {
        int swaps = 0;
        vector<int> sorted = values;
        sort(sorted.begin(), sorted.end());

        unordered_map<int, int> mp;
        for (int i = 0; i < values.size(); i++) {
            mp[values[i]] = i;
        }

        for (int i = 0; i < values.size(); i++) {
            if (values[i] != sorted[i]) {
                swaps++;
                int existingPos = mp[sorted[i]];
                mp[values[i]] = existingPos;
               // mp[sorted[i]] = i; --> not needed strictly since we dont come back to this 
                swap(values[existingPos], values[i]);
            }
        }
        return swaps;
    }

*** Interval classing issues ***
https://leetcode.com/problems/my-calendar-i/description/

Two events with start and endTime (s, e) and (a, b) are overlapping if and only if (a < e) && (s < b) where (s, e) are existing events and a, b is incoming
basically both startTimes are less than bothEndTimes

 bool book(int startTime, int endTime) {

        if(bookSet.empty()) {
            bookSet.insert({startTime, endTime});
            return true;
        }
        
        auto it = bookSet.lower_bound({startTime, endTime});
        
        if(it != bookSet.end() && it->first < endTime) return false; // check next

        if(it != bookSet.begin()) { // check prev
             auto prevIt = prev(it);

             if(startTime < prevIt->second) return false;
        }

        bookSet.insert({startTime, endTime});
        return true;
        
    }
 

PigeonHole principal (can be in maths)

If we have n holes and n+1 pigeons atleast one hole will have 2 pigeons etc

used in https://leetcode.com/problems/maximum-gap/

Given an integer array nums, return the maximum difference between two successive elements in its sorted form. 
If the array contains less than two elements, return 0. (in linear time)

class Solution {
public:
    int maximumGap(vector<int>& nums) {
        int n = nums.size();
        if (n < 2) return 0;

        int min_val = *min_element(nums.begin(), nums.end());
        int max_val = *max_element(nums.begin(), nums.end());

        int gap = (max_val - min_val) / (n - 1);

        int bucket_count = (max_val - min_val) / gap  + 1;
        vector<pair<int, int>> buckets(bucket_count, {INT_MAX, INT_MIN});

        for (int num : nums) {
            int index = (num - min_val) / gap;
            buckets[index].first = min(buckets[index].first, num);
            buckets[index].second = max(buckets[index].second, num);
        }

        int max_gap = 0;
        int prev_max = min_val;

        for (auto& bucket : buckets) {
            if (bucket.first == INT_MAX) continue;
            max_gap = max(max_gap, bucket.first - prev_max);
            prev_max = bucket.second;
        }

        return max_gap;
    }
};

Given an array find out if there exists a subarray whose sum is divisable by N (size of array)

ex 1 3 2 4 5  answer is yes (1 3 2 4 or 3 2)

use prefix sum array and keep count of sum%N in a map , if same number appears we return true
we can show same number will come (why : because for a array of size N possible unqiue remainder is N only ex : for N = 5 it is 0 1 2 3 4 so it will repeat)

If we have 2 find number of subarray with sum = k we can use maps and store frequency 

We can use nC2 for all combos (n is frequency of repeating mod)
ex if 1 repeats 3 times and 0 2 times --> 3C2 + 2C2 and so on 
nC2 --> n * n-1/ 2


Given N 64 bit integers such that any 2 successive numbers differ by exactly 1 bit , find out if there exists 4 successive numbers whose xor is 0

if N >= 130 answer is yes (due to pigeonhole understanding not clear saw aryan mittal video)
else i will bruteforce (basically o(n4) using 4 loops) 



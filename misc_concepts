*** Counting Sort ***


274. H-Index  (https://www.youtube.com/watch?v=mgG5KFTvfPw)

Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index
The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h time

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Brute force :: Start from h =1 (traverse array as soon as we see h numbers greater than or equal to h, it could be possible answer break and try one higher)
This will need O(N) traversal of array atmost N times so O(N2)

Optimized : keep a paper_count[n+1] = {0}, as well go thru each element inc its paper_count , so if paper_count[i] = x, shows that there are x papers with
exactly i citations for all numbers greater than n put it in nth bucket

Post traversing : paper_count = [1,1,0,1,0,2] {since n is 5 array has 6 eleemnts} go thru this array backwards so h = 5, and keep on summing as soon as 
sum crosses that is answer

h--> 5 sum =2 , h-->4 sum =2 , h --> 3 sum = 3 (answer)

class Solution {
public:
    int hIndex(vector<int>& citations) {
        
        int n = citations.size();

        vector<int> count(n+1,0);

         for (int i = 0; i < n; i++) {
            if (citations[i] >= n) {
                count[n]++;
            } else {
                count[citations[i]]++;
            }
        }

        int h_index = n;
        int p_count = 0;

        for(int i=n; i>=0; i--) {
            p_count+= count[i];
            if(p_count >= h_index) {
                return h_index;
            }
            h_index--;
        }

        return 0;
    }
};

238. Product of Array Except Self

Create two auxiliary arrays:

left where left[i] holds the product of all elements to the left of index i.
right where right[i] holds the product of all elements to the right of index i.
Calculate products in two passes:

Fill left by iterating from the start of the array.
Fill right by iterating from the end of the array.
Combine left and right:

The product of all elements except nums[i] will be left[i] * right[i]


380. Insert Delete GetRandom O(1)

We can do insert and GetRandom in vector directly issue is with delete since that requires traversing array to avoid same just keep a unoredered_map which
stores number and its index , while removing replace the last element with number to be deleted and delete number


Another way could be to maintain : map<int, pair<int,int>> where the extra int stores if number is valid or not (already removed)

135. Min Total Candy

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.

Needs 2 passes one from l-->r and other from r-->l


*** Sub-Array sum/count divisible by k type problems ****

974. Count Subarray Sums Divisible by K

One general concept used in array is sum between any index i and j can be calculated in O(1) , create a cummulative sum array than ans = sum[j] - sum[i-1];

Ex : 1 2 3 7  (let say i=1 j = 3 ans is 12) 
Using approach :: 1 3 6 13 , 13 -1 = 12

One way to do this will be used try every i ( from 0 to n) and every j from (i to n) get the sum using above technique and see if it is divisable , O(N2)

Optimal solution build on this , lets say prefix[i] % k = x and prefix[j] %k =x , than we can be sure that array between i and j that is divisable by k,
in the example above lets say k was 10 , than p[3]%k = 3 and p[1]%k = 3 ( so array of element 2 and 3 that is divisable by k) 

Now coming at a number and calculating remainder of cummulative sum till it , we would need to know if it is seen before for that we need map

So traverse from 0 to i , keep on storing cummulative_sum % k as remainder in map , if remainder is seen already add it in answer and do mp[rem]++;

1590. Make Sum Divisible by P

Solved using same idea , since we calculate cum_sum of array % p and we need minium length subrray with sum as that and we remove that

652. Find duplicate subtree

Given a tree find all duplicate subTrees inside it 

Idea is to travese the tree and keep on storing values associated with it's subtree in form of string , if same string repeats push in answer 

  string getSubTreeRoot(unordered_map<string, int> &mp, vector<TreeNode*> &res, TreeNode* root) {

        if(root == NULL) return "N";

        string subTreeString = to_string(root->val) + "L" + getSubTreeRoot(mp, res, root->left) + "R" + getSubTreeRoot(mp, res, root->right);

        if(mp[subTreeString] == 1) {
            res.push_back(root);
        }

        mp[subTreeString]++;

        return subTreeString;
    }

95. Unique BST - 2

Given a number n , return all unique BST formed with node from 1 to n 

Concept is to pick all numbers in range (1, n) let say we pick i , than 1,i-1 will be in left subtree and i+1,n will be in right subTree 
for all numbers with all combo we calc result and push in answer 

vector<TreeNode*> solve(int start, int end) {
        
        if(start > end) {
            return {NULL};
        }
        
        if(start == end) {
            TreeNode* root = new TreeNode(start);
            return {root};
        }
        
        
        vector<TreeNode*> result;
        for(int i = start; i <= end; i++) {
            
            vector<TreeNode*> leftList  = solve(start, i-1);
            vector<TreeNode*> rightList = solve(i+1, end);
            
            for(TreeNode* leftRoot : leftList) {
                
                for(TreeNode* rightRoot : rightList) {
                    
                    TreeNode* root = new TreeNode(i);
                    root->left  = leftRoot;
                    root->right = rightRoot;
                    
                    result.push_back(root);
                    
                }
                
            }
            
        }
        
        return result;
        
    }

Full binary Tree :: solved with same concept but with n even return empty which is a new condition


289. Game of Life 

It is easy to do with extra space , but to do it inplace there is a trick 

We have values as 1 and 0 , they update but while calculating for other cells around me we need old value of me

So instead change 0 --> 2 (instead of 1) and 1 --> -1(instread of 0) and check for abs(1) 

 void gameOfLife(vector<vector<int>>& board) {
        
        vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {1,1}, {1,-1}, {-1,0}, {-1,1}, {-1,-1}};

        int n = board.size();

        int m = board[0].size();

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                int life = 0;

                for(int k=0; k <8; k++) {
                    int nextR = i + dir[k][0];
                    int nextC = j + dir[k][1];

                    if(nextR >= 0 && nextR < n && nextC >=0 && nextC < m) {
                        if(abs(board[nextR][nextC]) == 1) life++;
                    }
                }

                if(board[i][j] == 1) {
                    if(life < 2) board[i][j] = -1;
                    else if(life > 3) board[i][j] = -1;
                } else {
                    if(life == 3) board[i][j] = 2;
                }
            }
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(board[i][j] == -1) board[i][j] = 0;
                else if(board[i][j] == 2) board[i][j] = 1;
            }
        }
    }


*** Digit dp *** (https://www.youtube.com/watch?v=cthI6e5KGgg&list=PLps5s7uQvz8kSh36EwW4_o1Qqjfm2vA1r&index=1)

Used in problems where we are given a range and asked questions around digits of same.

Let us understand this using for a given range [13, 43] count number of digit 3 which appear (ex in 13 it is 1 and so on)

This questions are solved with same as finding sum for a range where we have prefix sum so ans = solve(r) - solve(l-1)

Start with r =43

Let us understand the initution so our range numbers are 2 digit (__, ___) in first digit can be {0,1,2,3,4} these can be divided into 2 halfs {0,1,2,3} and {4} , but why , this is because if we take a number of first half we are free to put any number in second digit and we are within bound (43) , the same extends to second digit and so on --> this is called as tight or bound 

Why is this a dp ?

Once we choose any number from first half lets say 0 we would get a answer , when we choose any other number from that half our answer remains same so we reuse


Digit dp we define as dp[20][2][20] 
First parameter is called index , which is range of numbers we can get we take 20 so that we account till 10^18 ( which has 19 digits) (mandatory parameter)
Second parameter is called bound , which if true means we are restrcited in choosing , false we are not (mandatory parameter)
Third parameter is called count , and this actually keeps count of answer , so for 19 digit number we have possibility that all are true for our condition 
(This varies by problem)

int solve(string &s, int idx, int tight, int cnt) {
    if (idx == s.size()) return cnt;
    if (dp[idx][tight][cnt] != -1) return dp[idx][tight][cnt];
    
    int limit = (tight == 1 ? s[idx] - '0' : 9); // If tight is false we can keep till 9 else keep it digit we are at
    int ans = 0;
    
    for (int i = 0; i <= limit; i++) {
    int updateCnt = cnt + (i == 3 ? 1 : 0);
    if (i == limit) {
        // We are still following the exact prefix of the number, so we keep `tight` as it is
        ans += solve(s, idx + 1, tight, updateCnt); // Keep `tight` unchanged
    } else {
        ans += solve(s, idx + 1, 0, updateCnt);
    }
}
    
    return dp[idx][tight][cnt] = ans;
}

Sample problem : 233. Number of digit One

Another problem could be for a range of numbers , for all numbers count sum of its digits if that is prime number is called perfect , give number of perfect numbers 

Base would be if we reach end of number if the sum so far of digits is prime we would add 1 in answer

let say number is till 10^8 so our third parameter in dp would be till 72 (all 9s)


*** Sieve of Eratosthenes ***

Used to count all prime numbers from i to n 

--> For a number 'n' , only number till sqrt(n) , are potential prime numbers under it 

--> So iterate from range 1 to sqrt(n) if a number is prime mark its multiple as non-prime 

int countPrimes(int n) {
        if (n <= 2) return 0; // No primes less than 2

        vector<bool> isPrime(n, true); // Initialize all numbers as prime
        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime

        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) { // If i is prime
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false; // Mark multiples of i as not prime
                }
            }
        }

        return count(isPrime.begin(), isPrime.end(), true); // Count primes
    }

*** Add Two numbers without + or - ***

Here we rely on bit manipulation 

int getSum(int a, int b) {
        
        while(b !=0) {
            int xor_val = a^b;
            int and_val = (a & b) << 1;
            a = xor_val; // sum 
            b = and_val; // carry
        }

        return a;
    }

*** Line sweep https://leetcode.com/problems/maximum-frequency-of-an-element-after-performing-operations-i/description/ ***


General concept let say we have a array of 10 element with all zeroes and we get q queries where we are given (l, r) and for each query we inc 1 for range 
How to find end array ? (https://www.youtube.com/watch?v=29B244gyQJA for explain)

> One way is as queries come we traverse range and inc by 1 (but this takes 0(N))
> Optimized way is to add 1 in l and -1 in r+1 (now we take prefix sum for answer)


*** 2563. Count the Number of Fair Pairs ***

Uses BS upper bound and lower bound now how to visualise what is given by upper bound and lower bound 

lower_bound helps you locate the "first position" in a sorted array where an element can be inserted without breaking the sorting order.
upper_bound helps you locate the "last position" in a sorted array where an element can be inserted without breaking the sorting order.

Ex array is 1 3 5 7 7 8, lower bound is index = 3 and upper bound is index = 5

*** 862. Shortest Subarray with Sum at Least K ***

Note that tradional sliding window will not work because numbers can be negative ex : (84, -37, 32, 40,95 and k = 165)

one idea that can come in mind is store prefix sum of array in vector than go thru each index (i) for all index (j > i) if prefix sum[j] - prefix[i] >=K 
we have a candidates but this takes o(N2) ex

int shortestSubarray(vector<int>& nums, int k) {
        int n = nums.size();

        vector<int> prefix(n, 0);

        for(int i=0; i<n; i++) {
            if(i == 0) prefix[i] += nums[i];
            else prefix[i] += prefix[i-1] + nums[i];
        }

        int ans = INT_MAX;

        for(int i=0; i<n; i++) {
            if(prefix[i] >= k) ans = min(ans, i+1);
            for(int j=i+1; j<n; j++) {
                if(prefix[j] - prefix[i] >= k) {
                    ans = min(ans, j-i);
                }
            }
        }

        return ans == INT_MAX ? -1 : ans;
    }

So how can we optimize on this basically we can use a set to store prefixsum[i], i and use its lower bound to get smallest needed value

lower_bound gives an iterator to the "element(not position)" with the smallest value >= given value

*set.rbegin() gives max value in set and *set.begin() gives min value in set


1574. Shortest Subarray to be Removed to Make Array Sorted (https://www.youtube.com/watch?v=yOZSUfL-DxQ)

Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing


Input: arr = [1,2,3,10,4,2,3,5]
Output: 3

This is example where some part of array is sorted and some is not sorted , approach is to find a j from behind which is already sorted (here we reach to j=5)

now we start from beginning (till we stay sorted ) and find a j which is bigger than me , and keep on calculating result 

ex 
 while(i < j && (i == 0 || arr[i] >= arr[i-1])) {
            
            while(j < n && arr[j] < arr[i]) j++;

            res = min(res, j-i-1);
            i++;
}

*** Monotonic stack/queue patterns ****

These are used when for our answer we maintain something in sorted order in queue/stack

For this type of questions, always create a mountain array and see how where it fails etc 

Ex : 862. Shortest Subarray with Sum at Least K (https://www.youtube.com/watch?v=Z4tH40wH6JA)

(84, -37, 32, 40,95 and k = 165) ans is 3 

Idea is to get prefix array sum : 84 47 79 119 214 , whenever there is a dip in this array we wont have use of those indices because that sum will be 
created again later which will give shorter prefix so we can store indices based on sum in dequeue as long as sum increases 

402. Remove K Digits 

(Input: num = "1432219", k = 3
Output: "1219")

Again if we built mountain array we will see whenever we have a drop off that point removal is needed for reducing our total (so basically we need to 
remove peaks)

To do this effectively we can maintain a stack which will always store the results in increasing order and whenever we see stack top is greater than current
num we need to pop the top 

 for (int i = 0; i < n; i++) {
            // Pop the stack while k > 0 and the current digit is smaller than the stack's top
            while (k > 0 && !stk.empty() && stk.top() > s[i]) {
                stk.pop();
                k--;
            }
            // Push the current digit onto the stack
            stk.push(s[i]);
        }

        // If k > 0, we need to remove the remaining digits from the stack
while (k > 0 && !stk.empty()) {
    stk.pop();
    k--;
}

316. Remove duplicate letters

Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is 
the smallest in lexicographical order among all possible results.

Input: s = "bcabc"
Output: "abc"


Idea is to maintain the answer in queue sorted in lexagraphic order whenever we come to a char if it is lexicographical smaller than back of queue 
and character at back of queue can come again in string later we remove that 

class Solution {
public:
    string removeDuplicateLetters(string s) {
        vector<int> count(26, 0); // Count of each character
        vector<bool> inStack(26, false); // Whether a character is in the stack

        for (char c : s) {
            count[c - 'a']++; // Count occurrences of each character
        }

        deque<char> d; // Monotonic stack to maintain the result

        for (char c : s) {
            count[c - 'a']--; // Decrease the count of the current character

            if (inStack[c - 'a']) {
                // Skip if the character is already in the stack
                continue;
            }

            // Remove characters from the stack if:
            // - They are lexicographically larger than the current character and They can still appear later in the string (count > 0)
            while (!d.empty() && d.back() > c && count[d.back() - 'a'] > 0) {
                inStack[d.back() - 'a'] = false; // Mark the character as not in the stack
                d.pop_back();
            }

            d.push_back(c); // Add the current character to the stack
            inStack[c - 'a'] = true; // Mark the character as in the stack
        }

        // Convert the deque to a string
        string answer;
        while (!d.empty()) {
            answer += d.front();
            d.pop_front();
        }

        return answer;
    }
};



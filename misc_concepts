*** Upper bound/lower bound *****


lower_bound(key): Returns an iterator to the first element that is not less than the key (i.e., greater than or equal to the key).

upper_bound(key): Returns an iterator to the first element that is strictly greater than the key.

Here are a few more examples to reinforce this:

For vector<int> v = {1, 3, 3, 5, 7}; or map<int, int> m = {{1,1}, {3,3}, {5,5}, {7,7}};:

For key 3:

lower_bound(3) points to the first 3
upper_bound(3) points to 5
For key 4:

lower_bound(4) points to 5
upper_bound(4) also points to 5
For key 7:

lower_bound(7) points to 7
upper_bound(7) points to end
For key 8:

lower_bound(8) points to end
upper_bound(8) points to end




*** Counting Sort ***


274. H-Index  (https://www.youtube.com/watch?v=mgG5KFTvfPw)

Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index
The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h time

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Brute force :: Start from h =1 (traverse array as soon as we see h numbers greater than or equal to h, it could be possible answer break and try one higher)
This will need O(N) traversal of array atmost N times so O(N2)

Optimized : keep a paper_count[n+1] = {0}, as well go thru each element inc its paper_count , so if paper_count[i] = x, shows that there are x papers with
exactly i citations for all numbers greater than n put it in nth bucket

Post traversing : paper_count = [1,1,0,1,0,2] {since n is 5 array has 6 eleemnts} go thru this array backwards so h = 5, and keep on summing as soon as 
sum crosses that is answer

h--> 5 sum =2 , h-->4 sum =2 , h --> 3 sum = 3 (answer)

class Solution {
public:
    int hIndex(vector<int>& citations) {
        
        int n = citations.size();

        vector<int> count(n+1,0);

         for (int i = 0; i < n; i++) {
            if (citations[i] >= n) {
                count[n]++;
            } else {
                count[citations[i]]++;
            }
        }

        int h_index = n;
        int p_count = 0;

        for(int i=n; i>=0; i--) {
            p_count+= count[i];
            if(p_count >= h_index) {
                return h_index;
            }
            h_index--;
        }

        return 0;
    }
};

238. Product of Array Except Self

Create two auxiliary arrays:

left where left[i] holds the product of all elements to the left of index i.
right where right[i] holds the product of all elements to the right of index i.
Calculate products in two passes:

Fill left by iterating from the start of the array.
Fill right by iterating from the end of the array.
Combine left and right:

The product of all elements except nums[i] will be left[i] * right[i]


380. Insert Delete GetRandom O(1)

We can do insert and GetRandom in vector directly issue is with delete since that requires traversing array to avoid same just keep a unoredered_map which
stores number and its index , while removing replace the last element with number to be deleted and delete number


Another way could be to maintain : map<int, pair<int,int>> where the extra int stores if number is valid or not (already removed)

135. Min Total Candy

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.

Needs 2 passes one from l-->r and other from r-->l


*** Sub-Array sum/count divisible by k type problems ****

974. Count Subarray Sums Divisible by K

One general concept used in array is sum between any index i and j can be calculated in O(1) , create a cummulative sum array than ans = sum[j] - sum[i-1];

Ex : 1 2 3 7  (let say i=1 j = 3 ans is 12) 
Using approach :: 1 3 6 13 , 13 -1 = 12

One way to do this will be used try every i ( from 0 to n) and every j from (i to n) get the sum using above technique and see if it is divisable , O(N2)

Optimal solution build on this , lets say prefix[i] % k = x and prefix[j] %k =x , than we can be sure that array between i and j that is divisable by k,
in the example above lets say k was 10 , than p[3]%k = 3 and p[1]%k = 3 ( so array of element 2 and 3 that is divisable by k) 

Now coming at a number and calculating remainder of cummulative sum till it , we would need to know if it is seen before for that we need map

So traverse from 0 to i , keep on storing cummulative_sum % k as remainder in map , if remainder is seen already add it in answer and do mp[rem]++;

1590. Make Sum Divisible by P

Solved using same idea , since we calculate cum_sum of array % p and we need minium length subrray with sum as that and we remove that

652. Find duplicate subtree

Given a tree find all duplicate subTrees inside it 

Idea is to travese the tree and keep on storing values associated with it's subtree in form of string , if same string repeats push in answer 

  string getSubTreeRoot(unordered_map<string, int> &mp, vector<TreeNode*> &res, TreeNode* root) {

        if(root == NULL) return "N";

        string subTreeString = to_string(root->val) + "L" + getSubTreeRoot(mp, res, root->left) + "R" + getSubTreeRoot(mp, res, root->right);

        if(mp[subTreeString] == 1) {
            res.push_back(root);
        }

        mp[subTreeString]++;

        return subTreeString;
    }

95. Unique BST - 2

Given a number n , return all unique BST formed with node from 1 to n 

Concept is to pick all numbers in range (1, n) let say we pick i , than 1,i-1 will be in left subtree and i+1,n will be in right subTree 
for all numbers with all combo we calc result and push in answer 

vector<TreeNode*> solve(int start, int end) {
        
        if(start > end) {
            return {NULL};
        }
        
        if(start == end) {
            TreeNode* root = new TreeNode(start);
            return {root};
        }
        
        
        vector<TreeNode*> result;
        for(int i = start; i <= end; i++) {
            
            vector<TreeNode*> leftList  = solve(start, i-1);
            vector<TreeNode*> rightList = solve(i+1, end);
            
            for(TreeNode* leftRoot : leftList) {
                
                for(TreeNode* rightRoot : rightList) {
                    
                    TreeNode* root = new TreeNode(i);
                    root->left  = leftRoot;
                    root->right = rightRoot;
                    
                    result.push_back(root);
                    
                }
                
            }
            
        }
        
        return result;
        
    }

Full binary Tree :: solved with same concept but with n even return empty which is a new condition


289. Game of Life 

It is easy to do with extra space , but to do it inplace there is a trick 

We have values as 1 and 0 , they update but while calculating for other cells around me we need old value of me

So instead change 0 --> 2 (instead of 1) and 1 --> -1(instread of 0) and check for abs(1) 

 void gameOfLife(vector<vector<int>>& board) {
        
        vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {1,1}, {1,-1}, {-1,0}, {-1,1}, {-1,-1}};

        int n = board.size();

        int m = board[0].size();

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                int life = 0;

                for(int k=0; k <8; k++) {
                    int nextR = i + dir[k][0];
                    int nextC = j + dir[k][1];

                    if(nextR >= 0 && nextR < n && nextC >=0 && nextC < m) {
                        if(abs(board[nextR][nextC]) == 1) life++;
                    }
                }

                if(board[i][j] == 1) {
                    if(life < 2) board[i][j] = -1;
                    else if(life > 3) board[i][j] = -1;
                } else {
                    if(life == 3) board[i][j] = 2;
                }
            }
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(board[i][j] == -1) board[i][j] = 0;
                else if(board[i][j] == 2) board[i][j] = 1;
            }
        }
    }


*** Sieve of Eratosthenes ***

Used to count all prime numbers from i to n 

--> For a number 'n' , only number till sqrt(n) , are potential prime numbers under it 

--> So iterate from range 1 to sqrt(n) if a number is prime mark its multiple as non-prime 

int countPrimes(int n) {
        if (n <= 2) return 0; // No primes less than 2

        vector<bool> isPrime(n, true); // Initialize all numbers as prime
        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime

        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) { // If i is prime
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false; // Mark multiples of i as not prime
                }
            }
        }

        return count(isPrime.begin(), isPrime.end(), true); // Count primes
    }

*** Add Two numbers without + or - ***

Here we rely on bit manipulation 

int getSum(int a, int b) {
        
        while(b !=0) {
            int xor_val = a^b;
            int and_val = (a & b) << 1;
            a = xor_val; // sum 
            b = and_val; // carry
        }

        return a;
    }

*** Line sweep https://leetcode.com/problems/maximum-frequency-of-an-element-after-performing-operations-i/description/ ***


General concept let say we have a array of 10 element with all zeroes and we get q queries where we are given (l, r) and for each query we inc 1 for range 
How to find end array ? (https://www.youtube.com/watch?v=29B244gyQJA for explain)

> One way is as queries come we traverse range and inc by 1 (but this takes 0(N))
> Optimized way is to add 1 in l and -1 in r+1 (now we take prefix sum for answer)


*** 2563. Count the Number of Fair Pairs ***

Uses BS upper bound and lower bound now how to visualise what is given by upper bound and lower bound 

lower_bound helps you locate the "first position" in a sorted array where an element can be inserted without breaking the sorting order.
upper_bound helps you locate the "last position" in a sorted array where an element can be inserted without breaking the sorting order.

Ex array is 1 3 5 7 7 8, lower bound is index = 3 and upper bound is index = 5

*** 862. Shortest Subarray with Sum at Least K ***

Note that tradional sliding window will not work because numbers can be negative ex : (84, -37, 32, 40,95 and k = 165)

one idea that can come in mind is store prefix sum of array in vector than go thru each index (i) for all index (j > i) if prefix sum[j] - prefix[i] >=K 
we have a candidates but this takes o(N2) ex

int shortestSubarray(vector<int>& nums, int k) {
        int n = nums.size();

        vector<int> prefix(n, 0);

        for(int i=0; i<n; i++) {
            if(i == 0) prefix[i] += nums[i];
            else prefix[i] += prefix[i-1] + nums[i];
        }

        int ans = INT_MAX;

        for(int i=0; i<n; i++) {
            if(prefix[i] >= k) ans = min(ans, i+1);
            for(int j=i+1; j<n; j++) {
                if(prefix[j] - prefix[i] >= k) {
                    ans = min(ans, j-i);
                }
            }
        }

        return ans == INT_MAX ? -1 : ans;
    }

So how can we optimize on this basically we can use a set to store prefixsum[i], i and use its lower bound to get smallest needed value

lower_bound gives an iterator to the "element(not position)" with the smallest value >= given value

*set.rbegin() gives max value in set and *set.begin() gives min value in set


1574. Shortest Subarray to be Removed to Make Array Sorted (https://www.youtube.com/watch?v=yOZSUfL-DxQ)

Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing


Input: arr = [1,2,3,10,4,2,3,5]
Output: 3

This is example where some part of array is sorted and some is not sorted , approach is to find a j from behind which is already sorted (here we reach to j=5)

now we start from beginning (till we stay sorted ) and find a j which is bigger than me , and keep on calculating result 

ex 
 while(i < j && (i == 0 || arr[i] >= arr[i-1])) {
            
            while(j < n && arr[j] < arr[i]) j++;

            res = min(res, j-i-1);
            i++;
}

*** Monotonic stack/queue patterns ****

These are used when for our answer we maintain something in sorted order in queue/stack

For this type of questions, always create a mountain array and see how where it fails etc 

Ex : 862. Shortest Subarray with Sum at Least K (https://www.youtube.com/watch?v=Z4tH40wH6JA)

(84, -37, 32, 40,95 and k = 165) ans is 3 

Idea is to get prefix array sum : 84 47 79 119 214 , whenever there is a dip in this array we wont have use of those indices because that sum will be 
created again later which will give shorter prefix so we can store indices based on sum in dequeue as long as sum increases 

402. Remove K Digits 

(Input: num = "1432219", k = 3
Output: "1219")

Again if we built mountain array we will see whenever we have a drop off that point removal is needed for reducing our total (so basically we need to 
remove peaks)

To do this effectively we can maintain a stack which will always store the results in increasing order and whenever we see stack top is greater than current
num we need to pop the top 

 for (int i = 0; i < n; i++) {
            // Pop the stack while k > 0 and the current digit is smaller than the stack's top
            while (k > 0 && !stk.empty() && stk.top() > s[i]) {
                stk.pop();
                k--;
            }
            // Push the current digit onto the stack
            stk.push(s[i]);
        }

        // If k > 0, we need to remove the remaining digits from the stack
while (k > 0 && !stk.empty()) {
    stk.pop();
    k--;
}

316. Remove duplicate letters

Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is 
the smallest in lexicographical order among all possible results.

Input: s = "bcabc"
Output: "abc"


Idea is to maintain the answer in queue sorted in lexagraphic order whenever we come to a char if it is lexicographical smaller than back of queue 
and character at back of queue can come again in string later we remove that 

class Solution {
public:
    string removeDuplicateLetters(string s) {
        vector<int> count(26, 0); // Count of each character
        vector<bool> inStack(26, false); // Whether a character is in the stack

        for (char c : s) {
            count[c - 'a']++; // Count occurrences of each character
        }

        deque<char> d; // Monotonic stack to maintain the result

        for (char c : s) {
            count[c - 'a']--; // Decrease the count of the current character

            if (inStack[c - 'a']) {
                // Skip if the character is already in the stack
                continue;
            }

            // Remove characters from the stack if:
            // - They are lexicographically larger than the current character and They can still appear later in the string (count > 0)
            while (!d.empty() && d.back() > c && count[d.back() - 'a'] > 0) {
                inStack[d.back() - 'a'] = false; // Mark the character as not in the stack
                d.pop_back();
            }

            d.push_back(c); // Add the current character to the stack
            inStack[c - 'a'] = true; // Mark the character as in the stack
        }

        // Convert the deque to a string
        string answer;
        while (!d.empty()) {
            answer += d.front();
            d.pop_front();
        }

        return answer;
    }
};

3191. Minimum Operations to make all 1

You are given a binary array nums.

You can do the following operation on the array any number of times (possibly zero):

Choose any index i from the array and flip all the elements from index i to the end of the array.
Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1.

Input: nums = [0,1,1,0,1]

Output: 4

Explanation:
We can do the following operations:

Choose the index i = 1. The resulting array will be nums = [0,0,0,1,0].
Choose the index i = 0. The resulting array will be nums = [1,1,1,0,1].
Choose the index i = 4. The resulting array will be nums = [1,1,1,0,0].
Choose the index i = 3. The resulting array will be nums = [1,1,1,1,1]


initution is to realize that we traverse every element and if it is zero we would need to do operation of flip ( why because otherwise it can never be switched)

but if for every switch we do this our complexity becomes o(n2)

better way to do this is to keep a fliped variable , init to false, now if flip == false and element is 0 we know we need to flip the whole array 
similarly if flip = true and element is 1 we know that in due to some previous operation i would have become zero so i need flipping again

class Solution {
public:
    int minOperations(vector<int>& nums) {
        
        int n = nums.size();
        bool flip = false;

        int op = 0;

        for(int i=0; i<n; i++) {
            if(nums[i] == 0 && flip == false) {
                op++;
                flip = true;
            } else if(nums[i] == 1 && flip == true) {
                op++;
                flip = false;
            }
        }

        return op;
    }
}


843. Guess the word


The basic idea is easy choose a random word feed it to matcher see how many match go thru list and eliminate all words that dont have exact same match
with my guess. Repeat till we get answer 

This is good but we need a better way to pick a number what we should do is use minimax technique 

For each potential guess word:

Simulate matching it against all remaining words.
Count how many words would give 0 matches, 1 match, 2 matches, ..., up to 6 matches.
Find the largest of these counts. This is the "worst-case" scenario for this word.
Among all potential guess words:

Choose the one with the smallest "worst-case" count.
Example: Lets say we have two potential guess words, A and B:

Word A results in:

10 words with 0 matches
5 words with 1 match
15 words with 2 matches
2 words with 3 matches
0 words with 4, 5, or 6 matches Worst case for A: 15
Word B results in:

8 words with 0 matches
8 words with 1 match
8 words with 2 matches
8 words with 3 matches
0 words with 4, 5, or 6 matches Worst case for B: 8
We would choose Word B, because its worst case (8) is better than As worst case (15).

int selectWord(const vector<string>& words) {
    int n = words.size();
    int result = INT_MAX;
    int selected = 0;

    for(int i = 0; i < n; i++) {
        vector<int> count(7, 0);
        for(int j = 0; j < n; j++) {
            int match = mymatcher(words[i], words[j]);
            count[match]++;
        }
        
        int maxCount = *max_element(count.begin(), count.end());
        if(maxCount < result) {
            result = maxCount;
            selected = i;
        }
    }

    return selected;
}


3351. Sum of good subsequences

The difference between the "take/no take" approach and the "take-remove-taken/no-take" approach in recursion often depends on the nature of the problem 
and how items or states need to be handled during the recursion. Heres an explanation of when and why you might use each approach:

1. Take / No Take
In this approach, you decide whether to include an item in the current subset (or decision path) or not, without modifying the original structure.

When to Use:
The input remains unchanged between recursive calls.
The problem does not require altering the input to exclude what has already been "taken."
The recursion state inherently handles the progression through the input, such as moving an index forward to avoid reprocessing the same items.


Examples:
Subsets generation (e.g., Leetcode 78): No need to remove an item since recursion ensures it won’t be revisited.
Knapsack problems (where items can’t be reused): The index progression ensures each item is considered once.

2. Take-Remove-Taken / No Take
In this approach, you explicitly remove the "taken" item from the structure before recursing further.

When to Use:
The input structure (e.g., a list or set) needs to shrink dynamically as items are processed.
The problem explicitly requires backtracking to undo modifications and explore other possibilities.
You need to ensure the current state reflects only unprocessed options during subsequent recursive calls.


Examples:
Permutations (e.g., Leetcode 46): You remove the "taken" element from the list so it won’t be reused.
Problems involving non-linear relationships or graphs, where states need to be explicitly restored and modified.
Why the First Approach Worked in Leetcode 3351
Leetcode 3351 (Combinations With Constraints) has rules that naturally lend themselves to the "take/no-take" approach because:

Progression by Index: The problem processes elements in order, meaning once an index is moved forward, 
it guarantees the element at that index wont be reused in the same path.
Combination vs. Permutation: Unlike permutations, combinations do not require rearranging or removing items dynamically.


727. Minimum Window subsequences

Idea
Precompute next occurrence indices:

Create a next array of size n×26, where next[i][c] gives the next index of character c in s1 starting from position i.

This allows skipping irrelevant characters efficiently.
Find subsequences:

Use a two-pointer approach to efficiently find the start and end indices of each valid subsequence of s1 that matches s2.

Input: s1 = "abcdebdde", s2 = "bde"
Output: "bcde"

class Solution {
public:
    string minWindow(string s1, string s2) {
        int n = s1.size(), m = s2.size();
        
        vector<vector<int>> next(n + 1, vector<int>(26, -1));
        for (int i = n - 1; i >= 0; --i) {
            next[i] = next[i + 1];
            next[i][s1[i] - 'a'] = i;
        }
        
        int minLen = INT_MAX, start = -1;
        for (int i = 0; i < n; ++i) {
            if (s1[i] != s2[0]) continue;

            int end = i;
            for (char c : s2) {
                end = next[end][c - 'a'];
                if (end == -1) break;
                ++end;
            }
            
            if (end != -1 && end - i < minLen) {
                minLen = end - i;
                start = i;
            }
        }

        return start == -1 ? "" : s1.substr(start, minLen);


    }
};



LIS but at most k greater than  me 


> one way is to do LIS but store next greater element in map so that when  ever you take a number you know which number to take next rather than linear search
> but ideal way to do is using segment Tree


1547. Minimum Cost to Cut a Stick (https://leetcode.com/problems/minimum-cost-to-cut-a-stick/description/)


Using this problem to understand lower bound erase and insert in c++

> What we have is a initial range what we want is when we make a cut find out which range that number belongs to that is our cost and remove that range 
and add 2 ranges in that 
> We can use lower_bound to find that out 
> In vector of cuts also if we know index we can use that to insert and delete effectively 


class Solution {
public:
    int ans = INT_MAX;

    void solve(set<pair<int, int>> &ranges, vector<int> &cuts, int cost) {
        if (cuts.empty()) {
            ans = min(ans, cost);
            return;
        }

        for (int i = 0; i < cuts.size(); i++) {
            auto it = ranges.lower_bound({cuts[i], cuts[i]});
            if (it == ranges.end() || it->first > cuts[i]) it--;

            pair<int, int> range = *it;

            ranges.erase(it);
            ranges.insert({range.first, cuts[i]});
            ranges.insert({cuts[i], range.second});

            int removedCut = cuts[i];
            cuts.erase(cuts.begin() + i);

            solve(ranges, cuts, cost + range.second - range.first);

            // Restore ranges and cuts
            ranges.erase({range.first, removedCut});
            ranges.erase({removedCut, range.second});
            ranges.insert(range);
            cuts.insert(cuts.begin() + i, removedCut);
        }
    }

    int minCost(int n, vector<int> &cuts) {
        set<pair<int, int>> ranges;
        ranges.insert({0, n});
        solve(ranges, cuts, 0);
        return ans;
    }
};


818. Race Car 

This shows how effectively we can use BFS (to find minimum value ) even when its not obvious that BFS is the way to go for this problem 

class Solution {
public:
    struct Node {
        int pos;
        int speed;
        int moves;
    };

    int racecar(int target) {
        queue<Node> q;

        q.push({0, 1, 0});

        while(!q.empty()) {
            Node f = q.front();
            q.pop();

            int pos = f.pos;
            int speed = f.speed;
            int moves = f.moves;

            if(pos == target) return moves;

            if(pos + speed <= 2*target && pos + speed >= 0) {
                q.push({pos + speed, speed *2, moves + 1});
            }

            if(speed > 0 && pos + speed > target) {
                q.push({pos, -1, moves + 1});
            }

            if(speed <= 0 && pos + speed < target) {
                q.push({pos, 1, moves + 1});
            }
        }

        return -1;
    }
};

Time complexity -- O(tlogt) t --> target

Same concept is used in another problem where we need to convert a number x to y in minimum steps each time changing only one digit that is also a case 
of BFS with one digit change being my neighnour


https://leetcode.com/problems/find-the-safest-path-in-a-grid/description/ --> BFS + binary search

2872. https://leetcode.com/problems/maximum-number-of-k-divisible-components/ (Combines Trees with graphs very well) (https://www.youtube.com/watch?v=NfrA7Bem4DI&t=945s)

The idea is to a post order traversal type thing where we first calculate childs(because they have lesser dependency)

if at any point a node sum + its child sum becomes divisable by k we return 0 to parent and increase components to simulate cutting tree off


>>> Did not remember first time 
peak element/ rotated sorted list
string tokensition
KMP 
LRU cache
linked list is palindrom or not better method (using 0(n) space and without modifying ll)
basic calculator
h index





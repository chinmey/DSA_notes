to get ith bit 
1. 1 << i & num
2. num >> i & 1

(1 << 1)
This is a bitwise left shift operation.

1 in binary is: 0001
Left shifting by 1 means moving all bits one position to the left, and filling the rightmost bit with 0.
Step-by-step process:
0001  << 1 = 0010
In decimal, 0010 equals 2.

2. (2 >> 1)
This is a bitwise right shift operation.

2 in binary is: 0010
Right shifting by 1 means moving all bits one position to the right, and filling the leftmost bit with 0 (for unsigned or non-negative integers).
Step-by-step process:

yaml
Copy code
0010  >> 1 = 0001
In decimal, 0001 equals 1.


*** Bit Manipulation ***

*** Repeating and missing number in array ***(explain : https://www.youtube.com/watch?v=pnx5JA9LNM4&list=PL-Jc9J83PIiFJRioti3ZV7QabwoJK6eKe&index=9)

Ex : 1 4 2 2 --> answer would be 2 and 3

Xor of number with itself is always zero, take xor of original array and what should be correct array ( 1 -> 4)

We would be left with 2 xor 3 (all other number would get cut )
 
Now get the right-most set bit  = number & -number

The original set (which is array + 1-> n) can be divided into 2 with numbers having right most set bit as on/off and each of our number would be in different bucket 
Go thru set if & is zero xor seperately and if & is one xor seperately (you have 2 numbers)


int ith_bit = (num >> i) & 1 --> remember this or num & (1 << bitpos) 


 
 *** find a number which appears once in a array where every other number appear thrice ***

The main idea is that if every number appears three times except one unique number, then for each bit position (from 0 to 31 in a 32-bit integer), the sum of all bits in that position across all numbers in the array should be a multiple of 3 â€” except for the bits in the unique numbe

*** 1829. Maximum XOR for Each Query *** (https://www.youtube.com/watch?v=qDtW0HRvNc0)

The basic idea is max XOR is all 1 bit , so to get what value gives max XOR just take XOR with mask

*** 3133. Minimum Array End *** (https://www.youtube.com/watch?v=eA1xIDUqIDc)

The basic idea is min numnber would be 'x' itself and now we need to play around with 0 bits and keep on increasing it 


*** 3097 Shortest Subarray With OR at Least K II ***

Idea here is to use a basic sliding window and keep on calculating OR once we reach a window where OR >=k we need to shrink , now shrinking is not staright 
forward so we keep a array of setBit at all stages and upon removing a element which makes setBit[i] as 0 remove that pow(2) from OR

class Solution {
public:
    void setCountBit(vector<int> &count, int n) {
        for(int i=0; i<32; i++) {
            if(n & (1<<i)) count[i]++;
        }
        return;
    }
    
    void nullifyStart(vector<int> &count, int n, int &currentOR) {
        for(int i=0; i<32; i++) {
            if(n & (1<<i)) {
                count[i]--;
                if(count[i] == 0) {
                   currentOR = currentOR - (1 << i);
                }
            }
        }
    }
    int minimumSubarrayLength(vector<int>& nums, int k) {

        for(int num : nums) if(num >= k) return 1;
        
        vector<int> count(32, 0);

        int currentOR = 0, n = nums.size(), end = 0, start = 0, ans = n+1;

        while(end < n) {
           
           currentOR = currentOR | nums[end];
           setCountBit(count, nums[end]);

           while(currentOR >= k && end >= start) {
              ans = min(ans, end - start + 1);
              nullifyStart(count, nums[start], currentOR);
              start++;
           }

           end++;
        }

        if(ans == n+1) return -1;

        return ans;
    }
};

2939. Maximum XOR product (https://www.youtube.com/watch?v=rCnELsv6L2I&list=PLpIkg8OmuX-I-t2eiSxfO0UjiLhmNGfon&index=6)


one fact if we are xoring 2 numbers and we get to know a particular bit is set we can do this --> (axorb) xor (1 << i) --> this give result 

Answer is calculated bit by bit (if a bit of a and b is same , x would have that bit as opposite to them)
 (if they are different we need to try both and check max what we will notice is that for multiplication to be maximum numbers should be close 
 so always if bit is differet we take the bit so that lower one gets 1)


class Solution {
public:
    int mod = 1e9 + 7;
    typedef long long ll;
    int maximumXorProduct(long long a, long long b, int n) {
        
        ll xXora = 0;
        ll xXorb = 0;

        for(ll i = 49; i >= n; i--) {
            if(a >> i & 1) {
                xXora = xXora ^ (1ll << i);
            }
            
            if(b >> i & 1) {
                xXorb = xXorb ^ (1ll << i);
            }
        }

        for(ll i = n-1; i >=0; i--) {
             ll a_ith = (a >> i) & 1;
             ll b_ith = (b >> i) & 1;

             if(a_ith == b_ith) {
                xXora = xXora ^ (1ll << i);
                xXorb = xXorb ^ (1ll << i);
                continue;
             }

             if(xXora > xXorb) {
                xXorb = xXorb ^ (1ll << i);
             } else {
                xXora = xXora ^ (1ll << i);
             }
        }

        xXora = xXora % mod;
        xXorb = xXorb % mod;

        return (xXora * xXorb) % mod;
    }
};

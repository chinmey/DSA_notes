Number of components in a graph (just see how many DFS are needed to traverse each node)

void DFS(vector<vector<int>> &adj, vector<bool> &vis, int start) {
        vis[start] = true;

        for(int x : adj[start]) {
            if(!vis[x]) DFS(adj, vis, x);
        }
    }
    int numProvinces(vector<vector<int>> adj, int V) {
        
           vector<bool> vis(V, false); 
           int ans = 0;
           
           for(int i=0; i<V; i++) {
               if(vis[i] == false) {
                   ans++;
                   DFS(adj, vis, i);
               }
           }
           
           return ans;
}

Number of islands (https://leetcode.com/problems/number-of-islands/)

Again we have to count no of DFS needed , take neighbor as edges 


For shortest paths in unweighted graphs we need to rely on BFS and not DFS

BFS explores the graph level by level, meaning it visits all nodes at distance 1 from the source before visiting nodes at distance 2, and so on. 
This makes BFS ideal for finding the shortest path in an unweighted graph because the first time BFS reaches a node, it has found the shortest path to 
that node.


First kind of shortest path is finding shortest distance from S and D with some obstacles (https://leetcode.com/problems/shortest-path-in-binary-matrix/)

In BFS for shortest path we can either use level based counting or cell based counting (where we keep track of distance in cell)

Single Source


int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();

        int m = grid[0].size();

        if(grid[0][0] || grid[n-1][m-1]) return -1;

        vector<vector<bool>> vis(n, vector<bool>(m, false));

        int dx[]={0,0,1,1,1,-1,-1,-1};
        int dy[]={-1,1,0,1,-1,0,1,-1};

        queue<pair<int,int>> q;

        q.push({0,0});
        vis[0][0] = true;
        q.push({-1,-1}); // Helps us deduce which levels we are at

        int ans = 1;

        while(!q.empty()) {
           pair<int,int> p = q.front();
           q.pop();

           if(p.first == -1 && p.second == -1) {
              ans++;
              if(!q.empty()) {
                q.push({-1,-1});
              }
           } else {
            if(p.first == n-1 && p.second == m-1) return ans;

            for(int i = 0; i<8; i++) {
                int x = p.first + dx[i];
                int y = p.second + dy[i];

                if(x >= 0 && x < n && y>=0 && y<n && !vis[x][y] && !grid[x][y]) {
                    q.push({x, y});
                    vis[x][y] = true;
                }
            }
           }
        }

        return -1;


    }

Second common type is when in a matrix we only have (S and D) and we are asked to convert D into S in shortest time (ex Rotten Oranges) 
Multi Source

In this we put all of Source in queue than we go level by level and populate D 

*** imp : Identify the cells (states) that are already in the target condition or 
cannot be changed based on the problem constraints, these are put in queue ***

Example problem (Surrond cell : https://leetcode.com/problems/surrounded-regions/) 

The key initution is not around flipping 0s but finding out which 0s should be protected (so traverse boundary and push all 0s to queue) Do BFS and 
protect the 0s reachable from here (flip rest of the zeroes)


Third common type is Single Source problem with obstacles where we have ability to break obstacles (https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/description/)


The basic idea of BFS/DFS is we never visit the same cell again. In case of shortest paths this is important to ensure we dont visit same path again.
However addition of 'k' subpowers make it different we can visit a already visited path provided we have more value of 'k' than earlier visitor 
this is because since we have more 'k' we have better chance of breaking a obstacles and finding a new smallest path

he key insight here is to treat each possible state (x, y, d) as part of the BFS exploration. Instead of just checking whether a cell can be visited, 
the solution checks if it can be visited with a certain number of remaining obstacle eliminations (d). 
This allows the algorithm to differentiate between paths that may initially appear similar but offer different future potentials depending on how many obstacles remain.

struct State {
    int x, y, remainingK;
};

int shortestPath(vector<vector<int>>& grid, int k) {
    int n = grid.size(), m = grid[0].size();
    if (n == 1 && m == 1) return 0;
    
    vector<vector<int>> vis(n, vector<int>(m, -1));  // track max k remaining at each cell
    queue<State> q;
    q.push({0, 0, k});
    vis[0][0] = k;

    int level = 0;
    int dx[] = {0, 0, 1, -1};
    int dy[] = {1, -1, 0, 0};

    while (!q.empty()) {
        int sz = q.size();
        while (sz-- > 0) {
            State cur = q.front();
            q.pop();
            
            // Check if we reached the destination
            if (cur.x == n - 1 && cur.y == m - 1) return level;
            
            // Explore all 4 possible directions
            for (int i = 0; i < 4; i++) {
                int nextX = cur.x + dx[i];
                int nextY = cur.y + dy[i];
                
                // Make sure the new position is within bounds
                if (nextX >= 0 && nextX < n && nextY >= 0 && nextY < m) {
                    
                    if (grid[nextX][nextY] == 0) {  // If the cell is empty
                        if (vis[nextX][nextY] < cur.remainingK) {
                            vis[nextX][nextY] = cur.remainingK;
                            q.push({nextX, nextY, cur.remainingK});
                        }
                    } else if (grid[nextX][nextY] == 1 && cur.remainingK > 0) {  // If it's an obstacle and we can eliminate it
                        if (vis[nextX][nextY] < cur.remainingK - 1) {
                            vis[nextX][nextY] = cur.remainingK - 1;
                            q.push({nextX, nextY, cur.remainingK - 1});
                        }
                    }
                }
            }
        }
        level++;
    }
    
    return -1;  // If no path is found
}



0-1 BFS

0-1 BFS is a special case of BFS used in graphs where edge weights are restricted to only two possible values: 0 and 1

In 0-1 BFS, instead of using a regular queue, you use a deque (double-ended queue). The reason for this is that if you encounter an edge with weight 0, 
you want to process it immediately by adding it to the front of the deque (since itâ€™s a "free" move). 
If the edge has weight 1, you add it to the back of the deque (since its a "costly" move).

how it works:

Edges with weight 0 are processed first (pushed to the front of the deque).
Edges with weight 1 are processed later (pushed to the back of the deque).
This allows you to efficiently find the shortest path in O(V + E) time, where V is the number of vertices and E is the number of edges, by minimizing the cost of traversal using the properties of the deque

Example problem :: https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/description/

Interesting problem 

Cheapest flight with 'k' stops (https://leetcode.com/problems/cheapest-flights-within-k-stops/)

BFS but with extra condition of atmost k relaxation done (looks like Dijkstra but is not)

 queue<pair<int,int>> q;
        q.push({src,0});
        
        vector<int> dist(n,INT_MAX);
        dist[src] =0;
        
        int level =0;
        
        while(!q.empty() && level <=k)
        {
            int sz =q.size();
            while(sz--)
            {
                pair<int,int> p=q.front(); q.pop();
                int cv=p.first;
                int cw =p.second;
                
                for(auto it : adj[cv])
                {
                    int node =it.first;
                    int wt =it.second;
                    if(dist[node] > wt + cw)
                    {
                        dist[node] = wt + cw;
                        q.push({node,dist[node]});
                    }
                }
            }
            level++;
        }
        if(dist[dst] == INT_MAX) return -1;
        return dist[dst];
    }

Hidden BFS : https://leetcode.com/problems/open-the-lock/description/

Initution of Dijkstra

In BFS we traverse the nodes level by level , essentially since graph is unit weight , we are pushing nodes at levels + 1(weight) however with weighted
graph what we need to do is push the nodes at level + weight


Start from the source node, marking its distance as 0 (since it costs nothing to reach itself).
For each neighbor of the current node, calculate the potential new distance (current_distance + edge_weight). If this distance is smaller than the previously
recorded distance for that neighbor, update the neighbors distance and push it into the priority queue.
Repeat this process until all nodes have been processed or the priority queue is empty.

void dijkstra(int src, const vector<vector<pair<int, int>>& adj, vector<int>& dist) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // we can simply put greater<> also
    dist[src] = 0; // Distance to the source is 0
    pq.push({0, src}); // Push the source into the priority queue

    while (!pq.empty()) {
        int current_distance = pq.top().first;
        int current_node = pq.top().second;
        pq.pop();

        // If the distance is greater than the recorded distance, skip ensures we don't visit visited/outdated nodes
        if (current_distance > dist[current_node]) {
            continue; // or keep a visisted array and if already visisted proceed [not prefared in dijstrea]
        }

        // Explore neighbors
        for (const auto& neighbor : adj[current_node]) {
            int neighbor_node = neighbor.first;
            int weight = neighbor.second;

            // Calculate potential distance to neighbor
            int new_distance = current_distance + weight;

            // If found a shorter path to the neighbor
            if (new_distance < dist[neighbor_node]) {
                dist[neighbor_node] = new_distance; // Update distance
                pq.push({new_distance, neighbor_node}); // Push into priority queue
            }
        }
    }
}

One key point is how dijkstra maintains visited state , its by distance since we only process a node if we are improving the min distance to reach it

Time complexity = O((V+E)logV)

Sample problem : https://leetcode.com/problems/network-delay-time/description/ (easy straight forward )

Dijkstra on grids 

Problem : https://leetcode.com/problems/path-with-minimum-effort/description/ (https://www.youtube.com/watch?v=QIu9HeyEjPc) good problem

The approach for dijkstra on grid remains similar to graphs this is what we do 

> We init a dist vector for whole grid as INF for all cells (basically all cells are like nodes)
> We push src into pq the pq is usually storing distance, coodinate of cells
> We traverse the neighbor if the new distance calculated as current distance of top cell + edge improve the distance , we push the node in pq

class Solution {
public:
    typedef pair<int, pair<int,int>> P;
    int minimumEffortPath(vector<vector<int>>& h) {

        int n = h.size();
        int m = h[0].size();

        vector<vector<int>> dist(n, vector<int> (m, INT_MAX));
        priority_queue<P, vector<P>, greater<P>> pq;

        dist[0][0] = 0;
        pq.push({0, {0, 0}});

        vector<int> dir = {0,1,0,-1,0};

        while(!pq.empty()) {
            P top = pq.top();
            int diff = top.first;
            int x = top.second.first;
            int y = top.second.second;

            if(x == m-1 && y == n-1) return diff;
            
            pq.pop();

            for(int i=0; i<4; i++) {
                int nx = x + dir[i];
                int ny = y + dir[i+1];

                if(nx >=0 && nx < n && ny >=0 && ny < m) {
                    int new_diff = max(diff, abs(h[x][y] - h[nx][ny])); // This line is key look below 
                    if(new_diff < dist[nx][ny]) {
                        dist[nx][ny] = new_diff;
                        pq.push({new_diff, {nx, ny}});
                    }
                }
            }
        }

        return dist[n-1][m-1];
        
    }
};

int new_diff = max(diff, abs(h[x][y] - h[nx][ny])) --> is key for dijkstra with grids based on question conditon we need to figure this out 

Ex for swim in rising water it changes to  int new_time = max(diff, grid[nx][ny]); rest code stays same

Good dijkstra problem : https://leetcode.com/problems/second-minimum-time-to-reach-destination/description/

Hidden dijkstra problem : https://leetcode.com/problems/digit-operations-to-make-two-integers-equal/description/



Detect cycle in undirected graph 

o detect a cycle in an undirected graph using DFS, we rely on the parent-child relationship. Here's the key intuition summarized:

Parent Tracking: When visiting a node v from node  u, we track u as the parent of v (i.e., the node that led us to v).

Cycle Detection:

Undirected :: chalte chalte agar visited node pe aagaye jo mera parent nahi h to cycle h 

Directed :: Same logic will not work ex 0---->1<-----2 (we will say cycle h yahan) , basically teen state rakho (unvisted, visiting, visisted)
agar dfs ke dauran visiting mil jaye cycle h

While visiting a neighbor w of the current node v:
If w has not been visited, we continue the DFS by visiting w, marking v as the parent of w.


If w has already been visited and w is not the parent of v, this indicates a back edge (i.e., an edge that connects two nodes that are not directly connected in a parent-child relationship), 
which means a cycle is present

Detecting a cycle in a directed graph using DFS is a bit different from detecting one in an undirected graph. 
The key difference lies in the fact that edges have direction, so we dont need to worry about parent-child relationships as in undirected graphs. 
Instead, we use the concept of node states to detect cycles.

Intuition for Cycle Detection in Directed Graphs Using DFS
Node States:

Unvisited: The node has not been visited yet.
Visiting (or in recursion stack): The node is currently being explored (it is part of the current DFS path).
Visited: The node has been fully explored, meaning all its descendants have been processed, and its no longer part of the current DFS path.
Cycle Detection:

During the DFS traversal, if we encounter a node that is already in the "visiting" state (i.e., its in the recursion stack), it means there is a back edge
 leading to a node that is currently being visited, which indicates a cycle.
Once a node and all its descendants have been fully explored, we mark it as visited (fully processed).


We can also extend this to find longest cycle in graph (ex : https://leetcode.com/problems/longest-cycle-in-a-graph/)

Just while traversing need to maintain a count array which gives what is number of nodes we have visited and once we see a cycle cycle length would be 
count[current_node] - count[visting_node] + 1

class Solution {
public:
    int res = -1;
    
    void dfs(int u, vector<int> &edges, vector<int> &state, vector<int> &count) {
        if(u != -1) {
            
            state[u] = 1;
            int v = edges[u];

            if(v != -1 && state[v] == 0) {
                count[v] = count[u] + 1;
                dfs(v, edges, state, count);
            } else if(v != -1 && state[v] == 1) { // cycle detected
                res = max(res, count[u] - count[v] + 1);
            }

            state[u] = 2;

        }
    }
    int longestCycle(vector<int>& edges) {
        int n = edges.size();

        vector<int> state(n, 0); // 0 unvisited 1 visiting 2 visited
        vector<int> count(n, 1);

        for(int i=0; i<n; i++) {
            if(state[i] == 0) {
                dfs(i, edges, state, count);
            }
        }

        return res;
    }
};


Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, 
vertex u comes before v in the ordering. ---> DO dfs once a node is fully explored put it in stack (answer)


Kahns Algo (BFS way to do Topological sort and detect cycle in directed graph)

Calculate Indegrees: Compute the indegree (number of incoming edges) for each vertex in the graph.

Initialize Queue: Add all vertices with indegree 0 to a queue. These are the vertices with no dependencies, so they can be processed first.

Process Queue: Repeatedly do the following until the queue is empty:
Remove a vertex from the front of the queue and add it to the topological order.
For each of its neighbors, reduce their indegree by 1. If any neighborâ€™s indegree becomes 0, add it to the queue.

Check for Cycles: If the number of processed nodes is equal to the number of vertices, a valid topological sort exists. 
Otherwise, the graph contains a cycle (since there are nodes with non-zero indegree left).


**** Bidirectional BFS (https://leetcode.com/problems/minimum-knight-moves/description/)***

Specially used in infinite board/grid search type problems (it reduces search space to half so time complexity is N/2 which is still linear)

Knight tour on infinity board 

These are solved optimally by Bidirectional BFS we maintain 2 queue one from src and one from dest and we always do exploration from queue with lesser size

int bidirectionalBFS(Point start, Point target) {
    // Initialize two queues and visited sets
    queue<Point> q1, q2;
    unordered_set<Point> visited1, visited2;

    // Push start and target points into respective queues
    q1.push(start);
    q2.push(target);
    visited1.insert(start);
    visited2.insert(target);

    int steps = 0;

    while (!q1.empty() && !q2.empty()) {
        // Always expand the smaller queue
        if (q1.size() > q2.size()) {
            swap(q1, q2);
            swap(visited1, visited2);
        }

        int size = q1.size();
        for (int i = 0; i < size; i++) {
            Point current = q1.front();
            q1.pop();

            // Check if the current node is in the other visited set
            if (visited2.count(current)) {
                return steps; // Found the meeting point
            }

            // Explore neighbors
            for (Point neighbor : getNeighbors(current)) {
                if (visited1.count(neighbor)) continue;

                visited1.insert(neighbor);
                q1.push(neighbor);
            }
        }

        steps++;
    }

    return -1; // If no path exists
}


1036. Escape a Large Maze (https://leetcode.com/problems/escape-a-large-maze/description/)

2 points in inifnite grid (with blocks) find out if we can reach from a to b or not.

If we do our standard BFS since grid is infinite its complexity is also infinite so we need to come up with something else.
Ref : https://www.youtube.com/watch?v=bZqIfxD902c

The no of blocked cells is given it is (N) we can only not reach if these completely surrond s or t 

We need to find a shape with perimeter N with max area (it is a right triangle with hypotenuse being made by block and other two sides by grid boundaries)
This would be max because if we consider any other shape like square or circle we would need to waste blocks in making their boundary thus reducing area

Area : 200 blocks + 199 + 198 ...1 --> n(n-1)/2 blcoks or n2/2 blocks 

SO we will do a normal BFS and if at point our BFS has travelled (size of visited set) is more than n2/2 blocks we can reach the target


Union Find and the initution behind same (https://www.youtube.com/watch?v=L1T4AB8xBcw)


Let say we are given a graph and we get only two type of query in it (add edge between 2vertices ) and (find out if 2 vertice are in same component)


1st approach : make a adjanceny matrix out of graph than add edge is O(1) and to say if 2 vertex is in same component do dfs from either O(N)
we want to imporve on second 

2nd approach : Maintain a root-array ex  : 1 1 1 1 5 5


1 ----2 ----3        5----6 
      ----4  

Now whenever second type of query comes just check if roots are same , however if we are asked to add edge we need to traverse whole array and make 
all child have same root ( ex think if 4 --6 edge addition comes )


3rd approach : Maintain a  parent array ex : -1 1 2 2 -1 5 

Now how to find root (keep going till you get parent as -1) , just use this method to solve both kinds O(height) both

To minimise the height we want the tree to be as balanced as possible to ensure it when we join roots always make root with more height the parent

class UnionFind {
private:
    vector<int> parent, rank;

public:
    // Constructor to initialize parent and rank arrays
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);  // Initialize ranks to 0
        for (int i = 0; i < n; ++i) {
            parent[i] = i;  // Every element is its own parent initially
        }
    }

    // Find function with path compression
    int find(int node) {
        if (parent[node] != node) {
            parent[node] = find(parent[node]);  // Path compression
        }
        return parent[node];
    }

    // Union function by rank
    void unionByRank(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;  // Attach smaller rank tree under root of higher rank tree
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;  // Increase rank when both have the same rank
            }
        }
    }
};

Each union or find operation is amortized O(Î±(N)), which is effectively constant in practical scenarios due to the extremely slow growth of  alpha

Inverse ackerman constant

Sample problems : https://leetcode.com/problems/number-of-provinces/ (solve using this)
https://leetcode.com/problems/number-of-operations-to-make-network-connected/
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/ (Good problem showing union in a cell)

Union find on 2d grid (https://leetcode.com/problems/number-of-islands-ii/)

Graph + Tree , check if given relations form a valid tree (https://leetcode.com/problems/validate-binary-tree-nodes/description/)
> it should have no cycle (use Union find for it)
> it should have only one root (use Union find for it)
> it should have indegee of atmost 1 for all nodes 

We usaully still use a 1-d array for parent rank etc , say we have n rows and m columns cell is x*m + y;


Kruskal algo (Minimum Spanning tree)

An MST (Minimum Spanning Tree) of a graph is a subgraph that:

Spans all vertices (i.e., includes every vertex in the original graph).
Is a tree (connected and acyclic).
Has the minimum possible total edge weight, compared to all other spanning trees of the graph.


How can we use Union by Rank to find the MST?
Union by Rank (with Path Compression) can be applied to Kruskals Algorithm, which is a popular algorithm for finding the MST of a graph. 
The algorithm works as follows:

Sort all the edges in non-decreasing order of their weights.
Initialize a Union-Find (Disjoint Set Union) structure to keep track of which vertices are in which connected components.
Iterate over the sorted edges, and for each edge, check if its two vertices are in different connected components (using the find function).
If they are in different components, add the edge to the MST and union the two components.
Continue this process until you have added exactly V-1 edges (where V is the number of vertices).

struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;  // Sort by ascending edge weight
    }
};

for (Edge edge : edges) {
        if (uf.find(edge.u) != uf.find(edge.v)) {  // If u and v are in different components
            uf.unionByRank(edge.u, edge.v);        // Union the components
            mst_weight += edge.weight;             // Add the edge weight to the total MST weight
            mst.push_back(edge);                   // Include this edge in the MST
        }
    }

Sample problems : Connecting Cities With Minimum Cost , 
https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/description/ (https://www.youtube.com/watch?v=gDPh7gsK3F8)

Cycle detection in Undirected graph (using Union-Find)

Union-Find works for undirected graphs because it efficiently tracks the connected components and allows you to check if adding an edge forms a cycle. 
Here's how:

Cycle Detection in an Undirected Graph:
Every time you add an edge (say between nodes u and v), you check if both nodes u and v already belong to the same connected component 
(i.e., if they have the same root in the Union-Find structure).
If u and v are already connected (i.e., they have the same root), then adding the edge would form a cycle.
If they are not connected (i.e., they have different roots), you union them, merging their components.


Bipartite Graph 

A graph is called Bipartite if we can color it using only 2 colors such that no 2 adjacent vertex are colored same. 

A graph is bipartite if and only if it contains no odd-length cycles. This is because an odd cycle cannot be 2-colored.

This can be found using DFS or BFS
bool isBipartite(vector<vector<int>>& adj, int n) {
    vector<int> color(n, -1); // -1 indicates unvisited
    
    // Helper DFS function
    bool dfs(int node, int col, vector<vector<int>>& adj, vector<int>& color) {
        // Color the current node
        color[node] = col;
        
        // Visit all the adjacent vertices
        for (int neighbor : adj[node]) {
            if (color[neighbor] == -1) {
                // Recursively visit the neighbor with opposite color
                if (!dfs(neighbor, 1 - col, adj, color)) {
                    return false;
                }
            } else if (color[neighbor] == color[node]) {
                // If the neighbor has the same color, the graph is not bipartite
                return false;
            }
        }
        return true;
    }
    
    // Start DFS from every unvisited node (for disconnected graphs)
    for (int i = 0; i < n; i++) {
        if (color[i] == -1) {
            if (!dfs(i, 0, adj, color)) {
                return false;  // Graph is not bipartite
            }
        }
    }
    
    return true;  // Graph is bipartite
}


Bellman Ford (Shortest path from single source to all vertices in weighted graph with negative edge weight)qa


Says for a graph with V vertices if its is relaxed V-1 times we will get answer for shortest path

bool findShortestPaths(int n, vector<Edge>& edges, int src) {
        // Step 1: Initialize distances from src to all other vertices as INF
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        
        // Step 2: Relax all edges (n-1) times
        for (int i = 1; i < n; i++) {
            for (auto& edge : edges) {
                int u = edge.u;
                int v = edge.v;
                int weight = edge.weight;
                
                if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
            }
        }
        
        // Step 3: Check for negative weight cycles
        for (auto& edge : edges) {
            int u = edge.u;
            int v = edge.v;
            int weight = edge.weight;
            
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                cout << "Graph contains a negative weight cycle" << endl;
                return false;  // Negative cycle found
            }
        }
        
        // Step 4: Print the shortest distances
        cout << "Shortest distances from source " << src << " are:" << endl;
        for (int i = 0; i < n; i++) {
            if (dist[i] == INT_MAX)
                cout << "INF ";
            else
                cout << dist[i] << " ";
        }
        cout << endl;
        return true;  // No negative cycle found
    }

It takes the number of vertices n, a vector of edges edges, and the source node src.
First, it initializes the distance to all nodes as infinity, except the source node, which is set to 0.
It then performs relaxation of all edges for nâˆ’1 iterations.
After nâˆ’1 iterations, it checks for negative weight cycles by attempting to relax edges again. 
If an edge can still be relaxed, it means there is a negative weight cycle in the graph

Time Complexity: O(nâ‹…m), where n vertex m edge

In a simple path (a path that does not visit any vertex more than once), the longest possible path from one vertex to another can have at most 
nâˆ’1 edges. This is because there are nâˆ’1 edges before reaching its destination (since you cant visit a vertex more than once in a simple path)


Strongly Connected Components (Connected Components of directed graphs)

A strongly connected component (SCC) is a subgraph in a directed graph where every vertex is reachable from every other vertex in the same component. 
In other words, for every pair of vertices u and v in an SCC, there exists a path from u to v and a path from v to u.

Kosarajuâ€™s Algorithm (Two Passes):
First pass (DFS on original graph):

Perform a depth-first search (DFS) on the original graph and store the vertices in a stack based on their finishing times (i.e., vertices with the latest finish time are pushed last).
Second pass (DFS on reversed graph):

Reverse the directions of all edges to form the transpose of the graph.
Now, pop vertices one by one from the stack and perform DFS on the transposed graph. Each DFS will explore a distinct SCC.

class Solution {
public:
    // Function to perform the first DFS and push nodes to the stack based on finish times.
    void dfs1(int node, vector<vector<int>>& adj, vector<bool>& visited, stack<int>& st) {
        visited[node] = true;
        
        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                dfs1(neighbor, adj, visited, st);
            }
        }
        
        // After visiting all reachable vertices, push the node to the stack.
        st.push(node);
    }

    // Function to perform the second DFS on the transposed (reversed) graph.
    void dfs2(int node, vector<vector<int>>& transpose, vector<bool>& visited) {
        visited[node] = true;
        cout << node << " ";  // Print the node or store it in a component.

        for (int neighbor : transpose[node]) {
            if (!visited[neighbor]) {
                dfs2(neighbor, transpose, visited);
            }
        }
    }

    // Function to find and print all SCCs in a directed graph using Kosaraju's Algorithm.
    void findSCCs(int V, vector<vector<int>>& adj) {
        vector<bool> visited(V, false);
        stack<int> st;

        // Step 1: Perform DFS on the original graph and push nodes to the stack in order of their finish times.
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs1(i, adj, visited, st);
            }
        }

        // Step 2: Create the transpose (reversed) graph.
        vector<vector<int>> transpose(V);
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj[i]) {
                transpose[neighbor].push_back(i);  // Reverse the direction of the edges.
            }
        }

        // Step 3: Perform DFS on the reversed graph in the order defined by the stack.
        fill(visited.begin(), visited.end(), false);  // Reset visited array for the second DFS pass.
        while (!st.empty()) {
            int node = st.top();
            st.pop();

            // Perform DFS on the reversed graph from the node if it hasn't been visited.
            if (!visited[node]) {
                cout << "SCC: ";
                dfs2(node, transpose, visited);
                cout << endl;
            }
        }
    }
};


reconstruct itinerary (https://leetcode.com/problems/reconstruct-itinerary/) --> this is based on eulerian path
and https://leetcode.com/problems/valid-arrangement-of-pairs/

Euler path in Undirected graph (code story with mik)

For undirected graph indegree == outdegree

A path of edges which visits all edge in graph exactly once (Not all graphs have eulerian path)
A eulieran path which starts and ends on same node is called eulerian circuit or cycle, a graph having eulerian circuit is called eulerian graph


All vertices with non-zero indegree need to be in same component of graph if this does not happen graph will not have a euler path ex 

A--B          C---> D  ::: This graph does not have euler path

If all vertices have even-indegree than graph has eulerian circuit. (basically kyuki ek nikalne wala edge chahiye aur ek ghusne wala)
in this case any node can be source

A graph having euler path but no euler circuit will have its source and end vertex with odd indegree and rest with even indegree 
(basically baaki sab se nikal aur ghus pa rahe do se nahi hoga ek se sirf nikal payenge aur ek me sirf ghus)

A graph with more than 2 nodes with odd indegree will have no euler path 

First check if non-zero indegree nodes are connected 

if(oddInDegree == 2) return "Ep";
else if(oddInDegree == 0) return "Ec";
else if(oddInDegree > 2) return "none"


Euler in directed graph

Just extendeing concept from undirected graph for euler graph to exist here 
outdegree - indegree == 1 for one node (source), indegree - outdegree == 1 for one node (end), rest all will have same indregree and outdegree


Finding euler path in directed graph (ex problem : https://leetcode.com/problems/valid-arrangement-of-pairs/)

> Find starting node (outdegree - indegree == 1)
> Do DFS from this node for every unvisited edge push it in stack once all paths are explored pop it from stack 
> Reverse what we got here that is answer



Hamiltoninan cycle (Travelling businessnessman problem) (https://www.youtube.com/watch?v=JE0JE8ce1V0&t=19s)

A Hamiltonian Cycle is a path in a graph that:

Visits every vertex exactly once, and
Starts and ends at the same vertex

o/p of travelling salesman problem is minimum weight hamiltoninan cycle

// no of states is 2pow(n) for mask and n for pos
    
    map<pair<int,int>, int> mp;
    int solve(vector<vector<int>>& cost, int current_mask, int final_mask, int pos) {
        int n = cost.size();
        
        if(current_mask == final_mask) {
            return cost[pos][0];
        }
        
        if(mp.find({current_mask, pos}) != mp.end()) return mp[{current_mask, pos}];
        
        int ans = INT_MAX;
        
        for(int city = 0; city < n; city++) {
            if((current_mask & (1 << city)) == 0) {
                int new_ans =  cost[pos][city] 
                + solve(cost, current_mask | (1 << city), final_mask, city);
                
                ans = min(ans, new_ans);
            }
        }
        
        return mp[{current_mask, pos}] = ans;
    }
    int tsp(vector<vector<int>>& cost) {
        int n = cost.size();

        // We store which city has been traversed in a mask (ex 0000 means no one is visited and 1111 all visited)
        
        int visit_all_mask = (1 << n) - 1;
        
        int current_mask = 1;
        
        return solve(cost, current_mask, visit_all_mask, 0);
        
        
    }

Similar question :: 847. Shortest Path Visiting All Nodes


*** Bridges in a graph **** (https://leetcode.com/problems/critical-connections-in-a-network/)


A bridge is a edge if removed will make a undirected graph no longer connected 

Initution :: If a edge is a part of cycle, than it will never be critical (because some other edge exists than only cycle happens)

for the algo we do DFS and we will keep track of 2 things one is discovery_time of node (that is when it is seen first time) and second is minimum discovery time 
among all its neigbours apart from its parent

If low of a adjacency node is more than discovery time of parent three is a critical edge

An edge (u, v) is a bridge if: low[v] > disc[u]

There is no way for the subtree rooted at v to reach an ancestor of u (or u itself) except via the edge (u, v). 
In other words, removing (u, v) would disconnect the graph.

class Solution {
public:
    int timer = 1;
    vector<vector<int>> ans;

    void dfs(int v, vector<vector<int>> &adj, vector<int> &vis, vector<int> &discovery, 
    vector<int> &low, int parent) {

        vis[v] = 1;

        discovery[v] = timer;
        low[v] = timer;
        timer++;

        for(int neg : adj[v]) {
            if(neg == parent) continue;

            if(vis[neg] == 0) {
                dfs(neg, adj, vis, discovery, low, v);

                low[v] = min(low[v], low[neg]);

                if(low[neg] > discovery[v]) {
                    ans.push_back({neg, v});
                }
            } else {
                 low[v] = min(low[v], low[neg]);
            }
        }

    }

    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& con) {
        vector<vector<int>> adj(n);

        for(auto it : con) {
            int a = it[0];
            int b = it[1];

            adj[a].push_back(b);
            adj[b].push_back(a);
        }

        vector<int> vis(n, 0);
        vector<int> discovery(n, 0);
        vector<int> low(n, 0);

        dfs(0, adj, vis, discovery, low, -1);
        return ans;
    }
};

**** Articulation point ****

Same as bridge but with node 


*** Good problem ***

Given an undirected graph, Alice and Bob are standing somewhere (node index is given), 
They want to reach a common destination D such that the number of unique edges they traverse is as minimum as possible. 

It can be solved in 3 passes of BFS and a final scan over all nodes. Let the min cost path be

Alice (A) moves to some common node (C)
Bob (B) moves to the same common node
then they both travel from the common node to the destination node (D)


So we calculate minimum distance from D to all nodes, Alice to all nodes, Bob from all nodes (the sum of these distances when minimised is answer)


Maximum bipartite matching : https://www.geeksforgeeks.org/problems/maximum-bipartite-matching/1 (new concept)

more problems : https://leetcode.com/problems/maximum-number-of-accepted-invitations/description/ and https://leetcode.com/problems/maximum-matching-of-players-with-trainers/description/


Key is to always iterate over who gets what (ex employee gets job so we iterate over them or player get trainer)

Ex for player gets trainer this is code 


class Solution {
public:
    bool match(int player, vector<vector<int>> &pt, vector<int> &tp, vector<bool> &visited) {
        for(int trainer : pt[player]) {
            if(visited[trainer]) continue;

            visited[trainer] = true;

            if(tp[trainer] == -1 || match(tp[trainer], pt, tp, visited)) {
                tp[trainer] = player;
                return true;
            }
        }

        return false;
    }
    int matchPlayersAndTrainers(vector<int>& p, vector<int>& t) {
        int m = p.size();
        int n = t.size();

        vector<vector<int>> pt(m); // playerToTrainer

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(p[i] <= t[j]) {
                    pt[i].push_back(j);
                }
            }
        }

        vector<int> tp(n, -1); // trainerToPlayer
        int ans = 0;

        for(int i=0; i<m; i++) { // going thru players
           vector<bool> visited(n, false); // set All trainers as unvisited

           if(match(i, pt, tp, visited)) {
            ans++;
           }
        }

        return ans;
    }
};

Bipartite is a graph in which we can divide nodes into 2 sets where there is no edge between nodes of same set

#include <vector>
#include <unordered_map>
using namespace std;

unordered_map<int, int> job_people;

bool canAssignJob(int person, vector<vector<int>>& G, vector<bool>& visited) {
    int jobs = G[0].size();

    for (int job = 0; job < jobs; ++job) {
        if (G[person][job] && !visited[job]) {
            // Mark this job as visited
            visited[job] = true;

            // If the job is unassigned or if we can reassign the current person
            if (job_people.find(job) == job_people.end() || 
                canAssignJob(job_people[job], G, visited)) {
                // Assign the job to the current person
                job_people[job] = person;
                return true;
            }
        }
    }
    return false;
}

int maximumMatch(vector<vector<int>>& G) {
    int people = G.size();
    int maxMatch = 0;

    for (int person = 0; person < people; ++person) {
        // Track visited jobs for this person in the current DFS
        vector<bool> visited(G[0].size(), false);

        // Try to find a job for this person
        if (canAssignJob(person, G, visited)) {
            ++maxMatch;
        }
    }

    return maxMatch;
}


*** Shortest path between all nodes to all nodes ***


#include <iostream>
#include <climits>
using namespace std;

// Number of vertices in the graph
#define V 4

// The Floyd-Warshall algorithm
void floydWarshall(int graph[V][V]) {
    // dist[][] will be the shortest distance between every pair of vertices
    int dist[V][V];

    // Initialize the distance matrix same as the input graph matrix
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Applying the Floyd-Warshall Algorithm
    for (int k = 0; k < V; k++) {           // Intermediate vertex
        for (int i = 0; i < V; i++) {       // Source vertex
            for (int j = 0; j < V; j++) {   // Destination vertex
                // If the path from i to j through k is shorter than the direct path from i to j
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
}

int main() {
    // Letâ€™s consider a graph with 4 nodes and some weighted edges
    // If thereâ€™s no direct edge between two nodes, we use INT_MAX (infinity)
    int graph[V][V] = {
        {0, 3, INT_MAX, 7},
        {8, 0, 2, INT_MAX},
        {5, INT_MAX, 0, 1},
        {2, INT_MAX, INT_MAX, 0}
    };

    floydWarshall(graph);
    return 0;
}

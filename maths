939. Minimum Area Rectangle 

You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

this is a basic geometry application push all points in a set now traverse through array and check for every point in set as if they were diagonal elements 
of rectangle (that means x1 != x2 and y1 != y2)

class Solution {
public:
    int minAreaRect(vector<vector<int>>& points) {
        
        int ans = INT_MAX;

        set<pair<int,int>> s;

        for(vector<int> point : points) {
            s.insert({point[0], point[1]});
        }

        for(vector<int> point : points) {
            int x1 = point[0];
            int y1 = point[1];

            for(pair<int,int> p : s) {
                int x2 = p.first;
                int y2 = p.second;

                if(x1 != x2 && y1 != y2 && s.find({x1, y2}) != s.end() && s.find({x2, y1}) != s.end()) {
                    int area = abs(x1- x2) * abs(y1- y2);
                    ans = min(ans, area);
                }
            }
        }

        return ans == INT_MAX ? 0 : ans;
    }
};

2101. Detonate the Maximum Bombs

Points and radius are given which shows bomb location and blast radius , if one bomb exploded it explodes all bombs in its blast radius find out max 
bombs exploded if we are allowed to explode only one bomb 

How to find if 2 bombs are in range of each other ?

> radius of a + b < distance between their center points 

Use this combine with dfs to solve this ex 

class Solution {
public:
    bool isInRange(int x1, int y1, int x2, int y2, int r1) {
        long long dist = (long long)(x2 - x1) * (x2 - x1) + (long long)(y2 - y1) * (y2 - y1);
        long long radius = (long long)r1 * r1;
        return dist <= radius;
    }

    void dfs(int vertex, vector<bool> &exploded, int &explode, const vector<vector<int>>& bombs) {
        exploded[vertex] = true;
        explode++;
        int n = bombs.size();

        for (int i = 0; i < n; i++) {
            if (!exploded[i] && isInRange(bombs[vertex][0], bombs[vertex][1], bombs[i][0], bombs[i][1], bombs[vertex][2])) {
                dfs(i, exploded, explode, bombs);
            }
        }
    }

    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        int ans = 1;

        for (int i = 0; i < n; i++) {
            vector<bool> exploded(n, false);  // Reset exploded array for each bomb
            int explode = 0;
            dfs(i, exploded, explode, bombs);
            ans = max(ans, explode);
        }

        return ans;
    }
};

Now here we are doing repeated DFS let us memorize the result for easier Use

class Solution {
public:
    bool isInRange(int x1, int y1, int x2, int y2, int r1) {
        long long dist = (long long)(x2 - x1) * (x2 - x1) + (long long)(y2 - y1) * (y2 - y1);
        long long radius = (long long)r1 * r1;
        return dist <= radius;
    }

    int dfs(int vertex, vector<bool> &exploded, vector<int> &memo, const vector<vector<int>>& bombs) {
        if (memo[vertex] != -1) return memo[vertex];  // Return memoized result if already computed

        exploded[vertex] = true;
        int n = bombs.size();
        int explode = 1;  // Start with the current bomb

        for (int i = 0; i < n; i++) {
            if (!exploded[i] && isInRange(bombs[vertex][0], bombs[vertex][1], bombs[i][0], bombs[i][1], bombs[vertex][2])) {
                explode += dfs(i, exploded, memo, bombs);
            }
        }

        memo[vertex] = explode;    // Memoize the result for this bomb
        return explode;
    }

    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<int> memo(n, -1);  // To store the result of DFS for each bomb
        int ans = 1;

        for (int i = 0; i < n; i++) {
            vector<bool> exploded(n, false);  // Reset exploded array for each bomb
            ans = max(ans, dfs(i, exploded, memo, bombs));
        }

        return ans;
    }
};


2543. Check if Point Is Reachable

we are 1,1 we need to reach some tx, ty


In one step, you can move from point (x, y) to any one of the following points:

(x, y - x)
(x - y, y)
(2 * x, y)
(x, 2 * y)


 bool isReachable(int targetX, int targetY) {
        /**
        https://www.youtube.com/watch?v=KiVZRzPfKnQ
        This is the initution to the problem 
        since we dont need minimum we just need to know if we can reach or not 

        (2x, y) --> (2^n*x, y)
        (x, 2y) ---> (x, 2^m*y)

        we can merge this into one (2^n*x, 2^m*y)

        now gcd of this will always be some power of 2 (since both are power of 2)

        also even if subtract x or y the number is still always divisable by some power of 2 

        so from 1,1 we can reach x, y if and only if their gcd is some power of 2 
        **/

        int gcd = __gcd(targetX, targetY);

        return (gcd & (gcd - 1)) == 0;
}

365. Water and Jug problem 

capacities are x and y , target is z , this is solved by if z % GCD(x,y) ==0


Whenever we have linear combination of 2 variables and we are asked if a eventual state can be reached or not gcd is always something which should be 
kept in mind
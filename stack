Ex Next Greater element to right (Initution is which form you want your stack to be what is not useful is not needed)

vector<int> nextLargerElement(vector<int> arr, int n){
        
        stack<int> s;
        
        vector<int> ans;
        
        for(int i= arr.size() -1; i >=0 ; i--) {
            
            if(s.empty() || s.top() > arr[i]) {
                if(s.empty()) {
                    ans.push_back(-1);
                } else {
                    ans.push_back(s.top());
                }
                s.push(arr[i]);
            } else {
                while(!s.empty() && s.top() <= arr[i]) {
                    s.pop();
                }
                if(s.empty()) {
                    ans.push_back(-1);
                } else {
                    ans.push_back(s.top());
                }
                s.push(arr[i]);
            }
        }
        
        reverse(ans.begin(), ans.end());
        return ans;
    }


Largest rectangle in histogram 

The limiting factor is next smaller number to left and right for each bar just find that and find max of h[i] * width , width = (right[i] - lefy[i] - 1);


Min stack 

Basic way is to 2 stacks (second stack is min stack and it will only take a number if it is smaller than top because if it is larger it can never be min
since a number smaller than it is in stack which would be minimum always)

To do it in O(1) space if number is smaller push 2*n - min_ele in stack and maintain min_ele in variable


Stack using array or queue using array (all operations are O(1))

Stack -- init (top == -1) and maintain it in push/pop , queue --- init (rear,front == 0) and maintain them


Stack using queue

2 queues ---> In your stack implementation using two queues, the push operation is straightforward: when an element is pushed, it is added to q1, 
and this process takes constant time, O(1). On the other hand, the pop operation involves moving all elements from q1 to q2, except for the last element, 
which represents the top of the stack. This last element is then returned as the popped element. After that, the contents of q2 
(which now holds all the elements except the popped one) are copied back into q1, and q2 is emptied, preparing it for future operations.


Single queue 

Take a single queue.
push(x): Push the element in the queue.
Use a for loop of size()-1, remove element from queue and again push back to the queue, hence the most recent element becomes the most former element and vice versa.
pop(): remove the element from the queue.
top(): show the element at the top of the queue.
size(): size of the current queue.

int pop() {
      int s = q.size();
      int ans;
        
        for(int i=0; i<s; i++) {
            if(i == s-1) {
               ans = q.front();
            }
            int f = q.front();
            
            q.pop();
            if (i != s-1)
            q.push(f);
        }

        return ans;
    }


LRU cache (check linked list problems)



Sliding window maximum for each size k 


Queue is natural way to think with this (if a number bigger than me comes post me in window k than i am useless since i will get popped first, this way 
i maintain a queue and q.front() will be max)


issue can occur with cases like (1, 3 , 1 ,2) where when 3 is evicted 1 becomes front and not 2 to combat we may use priority_queue 

That too fails some case (for same numbes repeating) so optimal way is to use deque with indices and storing numbers from max to min in it.


Later gyann :: what should be Initution of this , it is similar to next greater type we need to use monotonic stack/queue here 

ex array :: 5 0 3 10 ...... and k = 3

in this window once we insert 10 in window 0 and 3 are useless since they occur before 10 and are smaller, so basically as we go thru array we will 
maintain a queue in decreasing order of value (since if  a number is larger and later all element post it are useless)

however we also need to pop those elements which are no longer in window itself for that we would need index

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();

        vector<int> ans;

        deque<int> dq; // index

        for(int i=0; i<n; i++) {
            while(!dq.empty() && dq.front() <= i - k) { // remove index not in window
                dq.pop_front();
            }

            while(!dq.empty() && nums[dq.back()] <= nums[i]) { // remove number smaller than me that occur before me
                dq.pop_back(); 
            }

            dq.push_back(i);

            if(i >= k-1) {
                ans.push_back(nums[dq.front()]);
            }

            
        }

        return ans;
    }
};


Trapping rain mater 

Calculate max left seen , calculate max right seen , ans = ans + min(max_left, max_right) - arr[i];

To do in in O(1) space , we need 2 pointers approach keep 2 pointers , i (start) and j(end) of array and keep track of max_left and max_right 

Water stored formulae is still same but whoever is limiting (less between these two) move that pointer only

int trap(vector<int>& h) {
    int n = h.size();
    if (n == 0 || n == 1) return 0;

    int i = 0, j = n - 1, ans = 0;
    int maxL = 0, maxR = 0;

    while (i <= j) {
        maxL = max(maxL, h[i]);
        maxR = max(maxR, h[j]);

        if (maxL < maxR) {
            ans += maxL - h[i];
            i++;
        } else {
            ans += maxR - h[j];
            j--;
        }
    }

    return ans;
}


Trapping rain water - 2 (https://www.youtube.com/watch?v=fywyCy6Fyoo&t=30s)

Here the initution is a little different we cant rely on above logic what we will do push all boundary elements in pq (basically those who cant keep water)

Now take the min of this (why min because if it can trap water all others can also do)

for every element check its neighbour we have 3 cases 

> neg is smaller than me (than we can store myHeight - neigbour height water) and push neg into queue with neg height + water stored (which is its new height)
> neg is equal or greater (no warer added) and push neg in queue

class Solution {
public:
    typedef pair<int, pair<int, int>> pp;
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size();
        int n = heightMap[0].size();

        priority_queue<pp, vector<pp>, greater<pp>> pq;

        vector<vector<bool>> vis(m, vector<bool>(n, false));

        // Add boundary cells to the priority queue and mark them as visited
        for (int i = 0; i < n; i++) {
            pq.push({heightMap[0][i], {0, i}});
            vis[0][i] = true;
            pq.push({heightMap[m - 1][i], {m - 1, i}});
            vis[m - 1][i] = true;
        }

        for (int i = 0; i < m; i++) {
            pq.push({heightMap[i][0], {i, 0}});
            vis[i][0] = true;
            pq.push({heightMap[i][n - 1], {i, n - 1}});
            vis[i][n - 1] = true;
        }

        // Directions for moving to adjacent cells (right, down, left, up)
        vector<int> dir = {0, 1, 0, -1, 0};

        int water = 0;

        while (!pq.empty()) {
            pp top = pq.top();
            pq.pop();

            int h = top.first; // Current height of the cell
            int x = top.second.first; // x-coordinate
            int y = top.second.second; // y-coordinate

            // Process the neighbors
            for (int i = 0; i < 4; i++) {
                int nx = x + dir[i];
                int ny = y + dir[i + 1];

                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !vis[nx][ny]) {
                    // If the neighboring cell is lower than the current height, water can be trapped
                    if (heightMap[nx][ny] < h) {
                        water += h - heightMap[nx][ny];
                    }

                    // Push the neighbor into the priority queue with the updated height
                    pq.push({max(heightMap[nx][ny], h), {nx, ny}});
                    vis[nx][ny] = true;
                }
            }
        }

        return water;
    }
};


Celebrity problem 

On the graph representation, a celebrity is a person who has exactly n - 1 directed edges going in (everybody knows them) 
and 0 edges going out (they know nobody).

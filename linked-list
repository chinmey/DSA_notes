
Reverse a linked list 

Iterative : keep cur, prev = null , next ptr move them and return next at last

Recursively : remember we can traverse a link list backwards using same logic 

  ListNode* reverseList(ListNode* head) {
        // Base case: If the list is empty or has only one node, return it
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        // Recursively reverse the rest of the list
        ListNode* newHead = reverseList(head->next);

        // Make the current node's next node point back to the current node
        head->next->next = head;

        // Set the current node's next to nullptr (since it's the new tail)
        head->next = nullptr;

        // Return the new head of the reversed list
        return newHead;
    }


Middle of linked list/ Cycle in linked list :: slow pointer + fast pointer

Merge 2 sorted list :: use dummy node technique
node* dummy = new node(-1) , node *p = dummy , based on whichever no is smaller keep making p->next to it , return dummy->next

Delete Nth node from back --> count from front and deleted ( 2 passes of list), use slow pointer + fast pointer for one pass , let fast traverse N nodes than 
start moving slow till fast reached null build from this


Delete a node when only it is given (no head) :  node->val=node->next->val; node->next=node->next->next;


Intersection point of linked list without extra space (use the fact that a (distance of listA from collision) , b (distance of listA from collision), 
c (common length) than a + b + c if we make same we are good)

Initialize two pointers ptr1 and ptr2 at head1 and head2 respectively.
Traverse through the lists, one node at a time.
When ptr1 reaches the end of a list, then redirect it to head2.
Similarly, when ptr2 reaches the end of a list, redirect it to the head1.
Once both of them go through reassigning, they will be at equal distance from the collision point.
If at any node ptr1 meets ptr2, then it is the intersection node.
After the second iteration if there is no intersection node , returns NULL.


Reverse list in size of k (uses recursion , idea is pehla reverse karo baaki recurse karo)
reverseKGroup(head, k) {
          if (size_list < k) return head;
          ListNode* cur=head;
          ListNode* prev=NULL;
          ListNode* future=NULL;
          int c=0;
        while(cur && c<k)
        {
            future=cur->next;
            cur->next=prev;
            prev=cur;
            cur=future;
            c++;
        }
        if(cur!=NULL)
            head->next=reverseKGroup(cur,k);
        
        return prev;
}

Start point of loop in linked list 

Detect if cycle exists or not using s-p and f-p way , once they meet , reset s_p to beginning and when again they meet that is point


In Floyd's Cycle Detection Algorithm, once the cycle is detected with slow and fast pointers meeting at point x, 
the total distance traveled by slow is L1 + x (from head to meeting point), and by fast is 2(L1 + x); using the equation 2(L1 + x) = L1 + x + nC, 
it simplifies to L1 + x = nC, meaning the distance from the head to the cycle start (L1) is equal to the distance from the meeting point to the cycle start
 (nC - x), so resetting one pointer to the head and moving both one step at a time ensures they meet at the start of the cycle.


 Copy linked list with next and random pointers
 Traverse list once and create all new nodes and store mapping of new node to old node
 Traverse old list again and create same mapping as in existing for new list

 Node *copy;
        
        map<Node*,Node*> mp;
        
        Node* t=head;
        while(t)
        {
          Node *dummy =new Node(t->val);
          mp[t] =dummy;
          t=t->next;  
        }
        
        t=head;
        
        while(t)
        {
            copy =mp[t];
            copy->next=mp[t->next];
            copy->random =mp[t->random];
            t=t->next;
        }
        
        return mp[head];
    }
Even something like this works (https://www.youtube.com/watch?v=deaZgauZVco&t=764s)

class Solution {
public:
    map<Node*, Node*> mp;
    Node* copyRandomList(Node* head) {
        Node* dummy = new Node(-1);
        Node* p = dummy;

        Node* cur = head;

        while(cur) {
            Node* newNode = new Node(cur->val);
            p->next = newNode;
            mp[cur] = newNode;
            cur = cur->next;
            p = p->next;
        }

        cur = head;
        while(cur) {
            Node* copyNode = mp[cur];
            copyNode->random = mp[cur->random];
            cur = cur->next;
        }

        return dummy->next;
    }
};

Copy linked list with next and bottom pointer 

Recursive way 

merge is same as merging two lists (use dummy pointer technique)
    
Node *flatten(Node *root)
{
   if(root == NULL || root->next == NULL) return root;
   
   root->next=flatten(root->next);
   
   root= merge(root,root->next);
   
   return root;
}


LRU cache : done using map(because we need O(1) get and put) and duoble linked list (for maintaining order and determining what to evict)

Video -- https://www.youtube.com/watch?v=Hi5obC_CwIU

Why we need iterator in map ? because i want to know without traversing list that it exists or not

Why we use DLL and not SLL ? So map would give me ref to node , now i need to have ref to node behind me so that it can point to node in front of me ,
essentially deleting me and i can move to front for that it is easier if i use DLL

What exactly is refresh doing ? Read above point , basically it removes existing key from list and puts it in front 

class LRUCache {
    list<int> lruList; // Doubly linked list to store only keys
    unordered_map<int, pair<int, list<int>::iterator>> cacheMap; // Map: key -> {value, iterator to lruList}
    int capacity;

    // Move the accessed key to the front of the list (most recently used)
    void refreshPosition(int key) {
        lruList.erase(cacheMap[key].second);  // Remove old position
        lruList.push_front(key);              // Add key to front
        cacheMap[key].second = lruList.begin(); // Update iterator in map
    }

public:
    LRUCache(int capacity) {
        this->capacity = capacity;
    }

    int get(int key) {
        if (cacheMap.find(key) != cacheMap.end()) {
            // Key found, refresh its position and return the value
            refreshPosition(key);
            return cacheMap[key].first; // Return the value associated with the key
        }
        return -1; // Key not found
    }

    void put(int key, int value) {
        if (cacheMap.find(key) != cacheMap.end()) {
            // Key already exists, update its value and refresh position
            cacheMap[key].first = value;
            refreshPosition(key);
        } else {
            // Key does not exist, add new key-value pair
            lruList.push_front(key); // Add key to front
            cacheMap[key] = {value, lruList.begin()}; // Store value and iterator to the list

            if (cacheMap.size() > capacity) {
                // Evict the least recently used item (back of the list)
                int lruKey = lruList.back();
                cacheMap.erase(lruKey);  // Remove from map
                lruList.pop_back();      // Remove from list
            }
        }
    }
};


LFU (least frequently used) Tie should be broken by recency 

When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented 
either a get or put operation is called on it

To maintain a Least Frequently Used (LFU) cache with recency as the tiebreaker, you can follow this intuition:

Track Frequency of Usage: Each key in the cache should be associated with a frequency count that tracks how often it's accessed (via get or put operations). 
You can use a map (hash table) to store the key-value pairs and their frequency.

Group Keys by Frequency: Use multiple lists (or doubly linked lists) to group keys that have the same frequency. 
Each frequency group (e.g., all keys with frequency 1, frequency 2, etc.) would have its own list to track the keys in order of recency.

Recency within Frequency Group: Within each frequency group, maintain the order of keys by recency of access. 
The most recently used key should be at the front of the list, while the least recently used (LRU) key should be at the back.

Eviction Strategy: When the cache exceeds capacity, evict the least frequently used key. 
If there is a tie in frequency, evict the least recently used key within the group of the lowest frequency.


In code we need to maintain 2 maps 

Maps key -> node (iterator to the node in freqList) : unordered_map<int, std::list<Node>::iterator> keyMap;
Maps frequency -> list of nodes with that frequency : unordered_map<int, std::list<Node>> freqListMap;


3 sum/ 4 sum 

To get unique only answer one naive way is to use set but if array is sorted we can just remove duplicates and that should be enough also 

Ex : like this once numbers match 
while (j < k && arr[j] == arr[j - 1]) j++;
while (j < k && arr[k] == arr[k + 1]) k--;


Trapping rain mater 

Calculate max left seen , calculate max right seen , ans = ans + min(max_left, max_right) - arr[i];

To do in in O(1) space , we need 2 pointers approach keep 2 pointers , i (start) and j(end) of array and keep track of max_left and max_right 

Water stored formulae is still same but whoever is limiting (less between these two) move that pointer only

int trap(vector<int>& h) {
    int n = h.size();
    if (n == 0 || n == 1) return 0;

    int i = 0, j = n - 1, ans = 0;
    int maxL = 0, maxR = 0;

    while (i <= j) {
        maxL = max(maxL, h[i]);
        maxR = max(maxR, h[j]);

        if (maxL < maxR) {
            ans += maxL - h[i];
            i++;
        } else {
            ans += maxR - h[j];
            j--;
        }
    }

    return ans;
}
